// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef XSD_SCL_ENUMS_HXX
#define XSD_SCL_ENUMS_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace SCL
{
  class tPredefinedPTypeEnum;
  class tExtensionPTypeEnum;
  class tPTypeEnum;
  class tPredefinedAttributeNameEnum;
  class tExtensionAttributeNameEnum;
  class tAttributeNameEnum;
  class tPredefinedCommonConductingEquipmentEnum;
  class tExtensionEquipmentEnum;
  class tCommonConductingEquipmentEnum;
  class tPowerTransformerEnum;
  class tTransformerWindingEnum;
  class tPredefinedEquipmentEnum;
  class tEquipmentEnum;
  class tPredefinedGeneralEquipmentEnum;
  class tExtensionGeneralEquipmentEnum;
  class tGeneralEquipmentEnum;
  class tServiceSettingsEnum;
  class tPhaseEnum;
  class tAuthenticationEnum;
  class tAssociationKindEnum;
  class tLPHDEnum;
  class tLLN0Enum;
  class tDomainLNGroupAEnum;
  class tDomainLNGroupCEnum;
  class tDomainLNGroupGEnum;
  class tDomainLNGroupIEnum;
  class tDomainLNGroupMEnum;
  class tDomainLNGroupPEnum;
  class tDomainLNGroupREnum;
  class tDomainLNGroupSEnum;
  class tDomainLNGroupTEnum;
  class tDomainLNGroupXEnum;
  class tDomainLNGroupYEnum;
  class tDomainLNGroupZEnum;
  class tDomainLNEnum;
  class tPredefinedLNClassEnum;
  class tExtensionLNClassEnum;
  class tLNClassEnum;
  class tPredefinedCDCEnum;
  class tExtensionCDCEnum;
  class tCDCEnum;
  class tTrgOptEnum;
  class tTrgOptControlEnum;
  class tFCEnum;
  class tServiceFCEnum;
  class tPredefinedBasicTypeEnum;
  class tExtensionBasicTypeEnum;
  class tBasicTypeEnum;
  class tValKindEnum;
  class tGSEControlTypeEnum;
  class tSIUnitEnum;
  class tUnitMultiplierEnum;
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "scl_basesimpletypes.hxx"

namespace SCL
{
  class tPredefinedPTypeEnum: public ::xml_schema::name
  {
    public:
    enum value
    {
      IP,
      IP_SUBNET,
      IP_GATEWAY,
      OSI_NSAP,
      OSI_TSEL,
      OSI_SSEL,
      OSI_PSEL,
      OSI_AP_Title,
      OSI_AP_Invoke,
      OSI_AE_Qualifier,
      OSI_AE_Invoke,
      MAC_Address,
      APPID,
      VLAN_PRIORITY,
      VLAN_ID
    };

    tPredefinedPTypeEnum (value v);

    tPredefinedPTypeEnum (const char* v);

    tPredefinedPTypeEnum (const ::std::string& v);

    tPredefinedPTypeEnum (const ::xml_schema::name& v);

    tPredefinedPTypeEnum (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    tPredefinedPTypeEnum (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    tPredefinedPTypeEnum (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    tPredefinedPTypeEnum (const tPredefinedPTypeEnum& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual tPredefinedPTypeEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tPredefinedPTypeEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tPredefinedPTypeEnum_convert ();
    }

    protected:
    value
    _xsd_tPredefinedPTypeEnum_convert () const;

    public:
    static const char* const _xsd_tPredefinedPTypeEnum_literals_[15];
    static const value _xsd_tPredefinedPTypeEnum_indexes_[15];
  };

  class tExtensionPTypeEnum: public ::xml_schema::normalized_string
  {
    public:
    // Constructors.
    //
    tExtensionPTypeEnum ();

    tExtensionPTypeEnum (const char*);

    tExtensionPTypeEnum (const ::std::string&);

    tExtensionPTypeEnum (const ::xml_schema::normalized_string&);

    tExtensionPTypeEnum (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tExtensionPTypeEnum (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tExtensionPTypeEnum (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tExtensionPTypeEnum (const tExtensionPTypeEnum& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual tExtensionPTypeEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~tExtensionPTypeEnum ();
  };

  class tPTypeEnum: public ::xml_schema::string
  {
    public:

    tPTypeEnum (const char* v);

    tPTypeEnum (const ::std::string& v);

    tPTypeEnum (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    tPTypeEnum (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    tPTypeEnum (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    tPTypeEnum (const tPTypeEnum& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual tPTypeEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class tPredefinedAttributeNameEnum: public ::xml_schema::name
  {
    public:
    enum value
    {
      T,
      Test,
      Check,
      SIUnit,
      Oper,
      SBO,
      SBOw,
      Cancel
    };

    tPredefinedAttributeNameEnum (value v);

    tPredefinedAttributeNameEnum (const char* v);

    tPredefinedAttributeNameEnum (const ::std::string& v);

    tPredefinedAttributeNameEnum (const ::xml_schema::name& v);

    tPredefinedAttributeNameEnum (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

    tPredefinedAttributeNameEnum (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

    tPredefinedAttributeNameEnum (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

    tPredefinedAttributeNameEnum (const tPredefinedAttributeNameEnum& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

    virtual tPredefinedAttributeNameEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tPredefinedAttributeNameEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tPredefinedAttributeNameEnum_convert ();
    }

    protected:
    value
    _xsd_tPredefinedAttributeNameEnum_convert () const;

    public:
    static const char* const _xsd_tPredefinedAttributeNameEnum_literals_[8];
    static const value _xsd_tPredefinedAttributeNameEnum_indexes_[8];
  };

  class tExtensionAttributeNameEnum: public ::SCL::tRestrName1stL
  {
    public:
    // Constructors.
    //
    tExtensionAttributeNameEnum (const char*);

    tExtensionAttributeNameEnum (const ::std::string&);

    tExtensionAttributeNameEnum (const ::xml_schema::name&);

    tExtensionAttributeNameEnum (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

    tExtensionAttributeNameEnum (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

    tExtensionAttributeNameEnum (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

    tExtensionAttributeNameEnum (const tExtensionAttributeNameEnum& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

    virtual tExtensionAttributeNameEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~tExtensionAttributeNameEnum ();
  };

  class tAttributeNameEnum: public ::xml_schema::string
  {
    public:

    tAttributeNameEnum (const char* v);

    tAttributeNameEnum (const ::std::string& v);

    tAttributeNameEnum (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    tAttributeNameEnum (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    tAttributeNameEnum (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    tAttributeNameEnum (const tAttributeNameEnum& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    virtual tAttributeNameEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class tPredefinedCommonConductingEquipmentEnum: public ::xml_schema::name
  {
    public:
    enum value
    {
      CBR,
      DIS,
      VTR,
      CTR,
      GEN,
      CAP,
      REA,
      CON,
      MOT,
      EFN,
      PSH,
      BAT,
      BSH,
      CAB,
      GIL,
      LIN,
      RRC,
      SAR,
      TCF,
      TCR,
      IFL
    };

    tPredefinedCommonConductingEquipmentEnum (value v);

    tPredefinedCommonConductingEquipmentEnum (const char* v);

    tPredefinedCommonConductingEquipmentEnum (const ::std::string& v);

    tPredefinedCommonConductingEquipmentEnum (const ::xml_schema::name& v);

    tPredefinedCommonConductingEquipmentEnum (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

    tPredefinedCommonConductingEquipmentEnum (const ::xercesc::DOMAttr& a,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

    tPredefinedCommonConductingEquipmentEnum (const ::std::string& s,
                                              const ::xercesc::DOMElement* e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

    tPredefinedCommonConductingEquipmentEnum (const tPredefinedCommonConductingEquipmentEnum& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

    virtual tPredefinedCommonConductingEquipmentEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tPredefinedCommonConductingEquipmentEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tPredefinedCommonConductingEquipmentEnum_convert ();
    }

    protected:
    value
    _xsd_tPredefinedCommonConductingEquipmentEnum_convert () const;

    public:
    static const char* const _xsd_tPredefinedCommonConductingEquipmentEnum_literals_[21];
    static const value _xsd_tPredefinedCommonConductingEquipmentEnum_indexes_[21];
  };

  class tExtensionEquipmentEnum: public ::xml_schema::name
  {
    public:
    // Constructors.
    //
    tExtensionEquipmentEnum (const char*);

    tExtensionEquipmentEnum (const ::std::string&);

    tExtensionEquipmentEnum (const ::xml_schema::name&);

    tExtensionEquipmentEnum (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    tExtensionEquipmentEnum (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    tExtensionEquipmentEnum (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    tExtensionEquipmentEnum (const tExtensionEquipmentEnum& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    virtual tExtensionEquipmentEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~tExtensionEquipmentEnum ();
  };

  class tCommonConductingEquipmentEnum: public ::xml_schema::string
  {
    public:

    tCommonConductingEquipmentEnum (const char* v);

    tCommonConductingEquipmentEnum (const ::std::string& v);

    tCommonConductingEquipmentEnum (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

    tCommonConductingEquipmentEnum (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

    tCommonConductingEquipmentEnum (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

    tCommonConductingEquipmentEnum (const tCommonConductingEquipmentEnum& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

    virtual tCommonConductingEquipmentEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class tPowerTransformerEnum: public ::xml_schema::name
  {
    public:
    enum value
    {
      PTR
    };

    tPowerTransformerEnum (value v);

    tPowerTransformerEnum (const char* v);

    tPowerTransformerEnum (const ::std::string& v);

    tPowerTransformerEnum (const ::xml_schema::name& v);

    tPowerTransformerEnum (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    tPowerTransformerEnum (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    tPowerTransformerEnum (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    tPowerTransformerEnum (const tPowerTransformerEnum& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    virtual tPowerTransformerEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tPowerTransformerEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tPowerTransformerEnum_convert ();
    }

    protected:
    value
    _xsd_tPowerTransformerEnum_convert () const;

    public:
    static const char* const _xsd_tPowerTransformerEnum_literals_[1];
    static const value _xsd_tPowerTransformerEnum_indexes_[1];
  };

  class tTransformerWindingEnum: public ::xml_schema::name
  {
    public:
    enum value
    {
      PTW
    };

    tTransformerWindingEnum (value v);

    tTransformerWindingEnum (const char* v);

    tTransformerWindingEnum (const ::std::string& v);

    tTransformerWindingEnum (const ::xml_schema::name& v);

    tTransformerWindingEnum (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    tTransformerWindingEnum (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    tTransformerWindingEnum (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    tTransformerWindingEnum (const tTransformerWindingEnum& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    virtual tTransformerWindingEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tTransformerWindingEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tTransformerWindingEnum_convert ();
    }

    protected:
    value
    _xsd_tTransformerWindingEnum_convert () const;

    public:
    static const char* const _xsd_tTransformerWindingEnum_literals_[1];
    static const value _xsd_tTransformerWindingEnum_indexes_[1];
  };

  class tPredefinedEquipmentEnum: public ::xml_schema::string
  {
    public:

    tPredefinedEquipmentEnum (const char* v);

    tPredefinedEquipmentEnum (const ::std::string& v);

    tPredefinedEquipmentEnum (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    tPredefinedEquipmentEnum (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    tPredefinedEquipmentEnum (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    tPredefinedEquipmentEnum (const tPredefinedEquipmentEnum& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    virtual tPredefinedEquipmentEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class tEquipmentEnum: public ::xml_schema::string
  {
    public:

    tEquipmentEnum (const char* v);

    tEquipmentEnum (const ::std::string& v);

    tEquipmentEnum (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    tEquipmentEnum (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    tEquipmentEnum (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    tEquipmentEnum (const tEquipmentEnum& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual tEquipmentEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class tPredefinedGeneralEquipmentEnum: public ::xml_schema::name
  {
    public:
    enum value
    {
      AXN,
      BAT,
      MOT
    };

    tPredefinedGeneralEquipmentEnum (value v);

    tPredefinedGeneralEquipmentEnum (const char* v);

    tPredefinedGeneralEquipmentEnum (const ::std::string& v);

    tPredefinedGeneralEquipmentEnum (const ::xml_schema::name& v);

    tPredefinedGeneralEquipmentEnum (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

    tPredefinedGeneralEquipmentEnum (const ::xercesc::DOMAttr& a,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

    tPredefinedGeneralEquipmentEnum (const ::std::string& s,
                                     const ::xercesc::DOMElement* e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

    tPredefinedGeneralEquipmentEnum (const tPredefinedGeneralEquipmentEnum& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

    virtual tPredefinedGeneralEquipmentEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tPredefinedGeneralEquipmentEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tPredefinedGeneralEquipmentEnum_convert ();
    }

    protected:
    value
    _xsd_tPredefinedGeneralEquipmentEnum_convert () const;

    public:
    static const char* const _xsd_tPredefinedGeneralEquipmentEnum_literals_[3];
    static const value _xsd_tPredefinedGeneralEquipmentEnum_indexes_[3];
  };

  class tExtensionGeneralEquipmentEnum: public ::xml_schema::name
  {
    public:
    // Constructors.
    //
    tExtensionGeneralEquipmentEnum (const char*);

    tExtensionGeneralEquipmentEnum (const ::std::string&);

    tExtensionGeneralEquipmentEnum (const ::xml_schema::name&);

    tExtensionGeneralEquipmentEnum (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

    tExtensionGeneralEquipmentEnum (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

    tExtensionGeneralEquipmentEnum (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

    tExtensionGeneralEquipmentEnum (const tExtensionGeneralEquipmentEnum& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

    virtual tExtensionGeneralEquipmentEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~tExtensionGeneralEquipmentEnum ();
  };

  class tGeneralEquipmentEnum: public ::xml_schema::string
  {
    public:

    tGeneralEquipmentEnum (const char* v);

    tGeneralEquipmentEnum (const ::std::string& v);

    tGeneralEquipmentEnum (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    tGeneralEquipmentEnum (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    tGeneralEquipmentEnum (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    tGeneralEquipmentEnum (const tGeneralEquipmentEnum& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    virtual tGeneralEquipmentEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class tServiceSettingsEnum: public ::xml_schema::name
  {
    public:
    enum value
    {
      Dyn,
      Conf,
      Fix
    };

    tServiceSettingsEnum (value v);

    tServiceSettingsEnum (const char* v);

    tServiceSettingsEnum (const ::std::string& v);

    tServiceSettingsEnum (const ::xml_schema::name& v);

    tServiceSettingsEnum (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    tServiceSettingsEnum (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    tServiceSettingsEnum (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    tServiceSettingsEnum (const tServiceSettingsEnum& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual tServiceSettingsEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tServiceSettingsEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tServiceSettingsEnum_convert ();
    }

    protected:
    value
    _xsd_tServiceSettingsEnum_convert () const;

    public:
    static const char* const _xsd_tServiceSettingsEnum_literals_[3];
    static const value _xsd_tServiceSettingsEnum_indexes_[3];
  };

  class tPhaseEnum: public ::xml_schema::name
  {
    public:
    enum value
    {
      A,
      B,
      C,
      N,
      all,
      none
    };

    tPhaseEnum (value v);

    tPhaseEnum (const char* v);

    tPhaseEnum (const ::std::string& v);

    tPhaseEnum (const ::xml_schema::name& v);

    tPhaseEnum (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    tPhaseEnum (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    tPhaseEnum (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    tPhaseEnum (const tPhaseEnum& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual tPhaseEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tPhaseEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tPhaseEnum_convert ();
    }

    protected:
    value
    _xsd_tPhaseEnum_convert () const;

    public:
    static const char* const _xsd_tPhaseEnum_literals_[6];
    static const value _xsd_tPhaseEnum_indexes_[6];
  };

  class tAuthenticationEnum: public ::xml_schema::name
  {
    public:
    enum value
    {
      none,
      password,
      week,
      strong,
      certificate
    };

    tAuthenticationEnum (value v);

    tAuthenticationEnum (const char* v);

    tAuthenticationEnum (const ::std::string& v);

    tAuthenticationEnum (const ::xml_schema::name& v);

    tAuthenticationEnum (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tAuthenticationEnum (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tAuthenticationEnum (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tAuthenticationEnum (const tAuthenticationEnum& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual tAuthenticationEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tAuthenticationEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tAuthenticationEnum_convert ();
    }

    protected:
    value
    _xsd_tAuthenticationEnum_convert () const;

    public:
    static const char* const _xsd_tAuthenticationEnum_literals_[5];
    static const value _xsd_tAuthenticationEnum_indexes_[5];
  };

  class tAssociationKindEnum: public ::xml_schema::token
  {
    public:
    enum value
    {
      pre_established,
      predefined
    };

    tAssociationKindEnum (value v);

    tAssociationKindEnum (const char* v);

    tAssociationKindEnum (const ::std::string& v);

    tAssociationKindEnum (const ::xml_schema::token& v);

    tAssociationKindEnum (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    tAssociationKindEnum (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    tAssociationKindEnum (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    tAssociationKindEnum (const tAssociationKindEnum& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual tAssociationKindEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tAssociationKindEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tAssociationKindEnum_convert ();
    }

    protected:
    value
    _xsd_tAssociationKindEnum_convert () const;

    public:
    static const char* const _xsd_tAssociationKindEnum_literals_[2];
    static const value _xsd_tAssociationKindEnum_indexes_[2];
  };

  class tLPHDEnum: public ::xml_schema::name
  {
    public:
    enum value
    {
      LPHD
    };

    tLPHDEnum (value v);

    tLPHDEnum (const char* v);

    tLPHDEnum (const ::std::string& v);

    tLPHDEnum (const ::xml_schema::name& v);

    tLPHDEnum (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    tLPHDEnum (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    tLPHDEnum (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    tLPHDEnum (const tLPHDEnum& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual tLPHDEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tLPHDEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tLPHDEnum_convert ();
    }

    protected:
    value
    _xsd_tLPHDEnum_convert () const;

    public:
    static const char* const _xsd_tLPHDEnum_literals_[1];
    static const value _xsd_tLPHDEnum_indexes_[1];
  };

  class tLLN0Enum: public ::xml_schema::name
  {
    public:
    enum value
    {
      LLN0
    };

    tLLN0Enum (value v);

    tLLN0Enum (const char* v);

    tLLN0Enum (const ::std::string& v);

    tLLN0Enum (const ::xml_schema::name& v);

    tLLN0Enum (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    tLLN0Enum (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    tLLN0Enum (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    tLLN0Enum (const tLLN0Enum& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual tLLN0Enum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tLLN0Enum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tLLN0Enum_convert ();
    }

    protected:
    value
    _xsd_tLLN0Enum_convert () const;

    public:
    static const char* const _xsd_tLLN0Enum_literals_[1];
    static const value _xsd_tLLN0Enum_indexes_[1];
  };

  class tDomainLNGroupAEnum: public ::xml_schema::name
  {
    public:
    enum value
    {
      ANCR,
      ARCO,
      ATCC,
      AVCO
    };

    tDomainLNGroupAEnum (value v);

    tDomainLNGroupAEnum (const char* v);

    tDomainLNGroupAEnum (const ::std::string& v);

    tDomainLNGroupAEnum (const ::xml_schema::name& v);

    tDomainLNGroupAEnum (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tDomainLNGroupAEnum (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tDomainLNGroupAEnum (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tDomainLNGroupAEnum (const tDomainLNGroupAEnum& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual tDomainLNGroupAEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tDomainLNGroupAEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tDomainLNGroupAEnum_convert ();
    }

    protected:
    value
    _xsd_tDomainLNGroupAEnum_convert () const;

    public:
    static const char* const _xsd_tDomainLNGroupAEnum_literals_[4];
    static const value _xsd_tDomainLNGroupAEnum_indexes_[4];
  };

  class tDomainLNGroupCEnum: public ::xml_schema::name
  {
    public:
    enum value
    {
      CILO,
      CSWI,
      CALH,
      CCGR,
      CPOW
    };

    tDomainLNGroupCEnum (value v);

    tDomainLNGroupCEnum (const char* v);

    tDomainLNGroupCEnum (const ::std::string& v);

    tDomainLNGroupCEnum (const ::xml_schema::name& v);

    tDomainLNGroupCEnum (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tDomainLNGroupCEnum (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tDomainLNGroupCEnum (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tDomainLNGroupCEnum (const tDomainLNGroupCEnum& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual tDomainLNGroupCEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tDomainLNGroupCEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tDomainLNGroupCEnum_convert ();
    }

    protected:
    value
    _xsd_tDomainLNGroupCEnum_convert () const;

    public:
    static const char* const _xsd_tDomainLNGroupCEnum_literals_[5];
    static const value _xsd_tDomainLNGroupCEnum_indexes_[5];
  };

  class tDomainLNGroupGEnum: public ::xml_schema::name
  {
    public:
    enum value
    {
      GAPC,
      GGIO,
      GSAL
    };

    tDomainLNGroupGEnum (value v);

    tDomainLNGroupGEnum (const char* v);

    tDomainLNGroupGEnum (const ::std::string& v);

    tDomainLNGroupGEnum (const ::xml_schema::name& v);

    tDomainLNGroupGEnum (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tDomainLNGroupGEnum (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tDomainLNGroupGEnum (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tDomainLNGroupGEnum (const tDomainLNGroupGEnum& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual tDomainLNGroupGEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tDomainLNGroupGEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tDomainLNGroupGEnum_convert ();
    }

    protected:
    value
    _xsd_tDomainLNGroupGEnum_convert () const;

    public:
    static const char* const _xsd_tDomainLNGroupGEnum_literals_[3];
    static const value _xsd_tDomainLNGroupGEnum_indexes_[3];
  };

  class tDomainLNGroupIEnum: public ::xml_schema::name
  {
    public:
    enum value
    {
      IHMI,
      IARC,
      ITCI,
      ITMI
    };

    tDomainLNGroupIEnum (value v);

    tDomainLNGroupIEnum (const char* v);

    tDomainLNGroupIEnum (const ::std::string& v);

    tDomainLNGroupIEnum (const ::xml_schema::name& v);

    tDomainLNGroupIEnum (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tDomainLNGroupIEnum (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tDomainLNGroupIEnum (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tDomainLNGroupIEnum (const tDomainLNGroupIEnum& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual tDomainLNGroupIEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tDomainLNGroupIEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tDomainLNGroupIEnum_convert ();
    }

    protected:
    value
    _xsd_tDomainLNGroupIEnum_convert () const;

    public:
    static const char* const _xsd_tDomainLNGroupIEnum_literals_[4];
    static const value _xsd_tDomainLNGroupIEnum_indexes_[4];
  };

  class tDomainLNGroupMEnum: public ::xml_schema::name
  {
    public:
    enum value
    {
      MMXU,
      MDIF,
      MHAI,
      MHAN,
      MMTR,
      MMXN,
      MSQI,
      MSTA
    };

    tDomainLNGroupMEnum (value v);

    tDomainLNGroupMEnum (const char* v);

    tDomainLNGroupMEnum (const ::std::string& v);

    tDomainLNGroupMEnum (const ::xml_schema::name& v);

    tDomainLNGroupMEnum (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tDomainLNGroupMEnum (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tDomainLNGroupMEnum (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tDomainLNGroupMEnum (const tDomainLNGroupMEnum& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual tDomainLNGroupMEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tDomainLNGroupMEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tDomainLNGroupMEnum_convert ();
    }

    protected:
    value
    _xsd_tDomainLNGroupMEnum_convert () const;

    public:
    static const char* const _xsd_tDomainLNGroupMEnum_literals_[8];
    static const value _xsd_tDomainLNGroupMEnum_indexes_[8];
  };

  class tDomainLNGroupPEnum: public ::xml_schema::name
  {
    public:
    enum value
    {
      PDIF,
      PDIS,
      PDIR,
      PDOP,
      PDUP,
      PFRC,
      PHAR,
      PHIZ,
      PIOC,
      PMRI,
      PMSS,
      POPF,
      PPAM,
      PSCH,
      PSDE,
      PTEF,
      PTOC,
      PTOF,
      PTOV,
      PTRC,
      PTTR,
      PTUC,
      PTUV,
      PUPF,
      PTUF,
      PVOC,
      PVPH,
      PZSU
    };

    tDomainLNGroupPEnum (value v);

    tDomainLNGroupPEnum (const char* v);

    tDomainLNGroupPEnum (const ::std::string& v);

    tDomainLNGroupPEnum (const ::xml_schema::name& v);

    tDomainLNGroupPEnum (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tDomainLNGroupPEnum (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tDomainLNGroupPEnum (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tDomainLNGroupPEnum (const tDomainLNGroupPEnum& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual tDomainLNGroupPEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tDomainLNGroupPEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tDomainLNGroupPEnum_convert ();
    }

    protected:
    value
    _xsd_tDomainLNGroupPEnum_convert () const;

    public:
    static const char* const _xsd_tDomainLNGroupPEnum_literals_[28];
    static const value _xsd_tDomainLNGroupPEnum_indexes_[28];
  };

  class tDomainLNGroupREnum: public ::xml_schema::name
  {
    public:
    enum value
    {
      RSYN,
      RDRE,
      RADR,
      RBDR,
      RDRS,
      RBRF,
      RDIR,
      RFLO,
      RPSB,
      RREC
    };

    tDomainLNGroupREnum (value v);

    tDomainLNGroupREnum (const char* v);

    tDomainLNGroupREnum (const ::std::string& v);

    tDomainLNGroupREnum (const ::xml_schema::name& v);

    tDomainLNGroupREnum (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tDomainLNGroupREnum (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tDomainLNGroupREnum (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tDomainLNGroupREnum (const tDomainLNGroupREnum& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual tDomainLNGroupREnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tDomainLNGroupREnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tDomainLNGroupREnum_convert ();
    }

    protected:
    value
    _xsd_tDomainLNGroupREnum_convert () const;

    public:
    static const char* const _xsd_tDomainLNGroupREnum_literals_[10];
    static const value _xsd_tDomainLNGroupREnum_indexes_[10];
  };

  class tDomainLNGroupSEnum: public ::xml_schema::name
  {
    public:
    enum value
    {
      SARC,
      SIMG,
      SIML,
      SPDC
    };

    tDomainLNGroupSEnum (value v);

    tDomainLNGroupSEnum (const char* v);

    tDomainLNGroupSEnum (const ::std::string& v);

    tDomainLNGroupSEnum (const ::xml_schema::name& v);

    tDomainLNGroupSEnum (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tDomainLNGroupSEnum (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tDomainLNGroupSEnum (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tDomainLNGroupSEnum (const tDomainLNGroupSEnum& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual tDomainLNGroupSEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tDomainLNGroupSEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tDomainLNGroupSEnum_convert ();
    }

    protected:
    value
    _xsd_tDomainLNGroupSEnum_convert () const;

    public:
    static const char* const _xsd_tDomainLNGroupSEnum_literals_[4];
    static const value _xsd_tDomainLNGroupSEnum_indexes_[4];
  };

  class tDomainLNGroupTEnum: public ::xml_schema::name
  {
    public:
    enum value
    {
      TCTR,
      TVTR
    };

    tDomainLNGroupTEnum (value v);

    tDomainLNGroupTEnum (const char* v);

    tDomainLNGroupTEnum (const ::std::string& v);

    tDomainLNGroupTEnum (const ::xml_schema::name& v);

    tDomainLNGroupTEnum (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tDomainLNGroupTEnum (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tDomainLNGroupTEnum (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tDomainLNGroupTEnum (const tDomainLNGroupTEnum& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual tDomainLNGroupTEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tDomainLNGroupTEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tDomainLNGroupTEnum_convert ();
    }

    protected:
    value
    _xsd_tDomainLNGroupTEnum_convert () const;

    public:
    static const char* const _xsd_tDomainLNGroupTEnum_literals_[2];
    static const value _xsd_tDomainLNGroupTEnum_indexes_[2];
  };

  class tDomainLNGroupXEnum: public ::xml_schema::name
  {
    public:
    enum value
    {
      XCBR,
      XSWI
    };

    tDomainLNGroupXEnum (value v);

    tDomainLNGroupXEnum (const char* v);

    tDomainLNGroupXEnum (const ::std::string& v);

    tDomainLNGroupXEnum (const ::xml_schema::name& v);

    tDomainLNGroupXEnum (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tDomainLNGroupXEnum (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tDomainLNGroupXEnum (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tDomainLNGroupXEnum (const tDomainLNGroupXEnum& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual tDomainLNGroupXEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tDomainLNGroupXEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tDomainLNGroupXEnum_convert ();
    }

    protected:
    value
    _xsd_tDomainLNGroupXEnum_convert () const;

    public:
    static const char* const _xsd_tDomainLNGroupXEnum_literals_[2];
    static const value _xsd_tDomainLNGroupXEnum_indexes_[2];
  };

  class tDomainLNGroupYEnum: public ::xml_schema::name
  {
    public:
    enum value
    {
      YPTR,
      YEFN,
      YLTC,
      YPSH
    };

    tDomainLNGroupYEnum (value v);

    tDomainLNGroupYEnum (const char* v);

    tDomainLNGroupYEnum (const ::std::string& v);

    tDomainLNGroupYEnum (const ::xml_schema::name& v);

    tDomainLNGroupYEnum (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tDomainLNGroupYEnum (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tDomainLNGroupYEnum (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tDomainLNGroupYEnum (const tDomainLNGroupYEnum& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual tDomainLNGroupYEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tDomainLNGroupYEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tDomainLNGroupYEnum_convert ();
    }

    protected:
    value
    _xsd_tDomainLNGroupYEnum_convert () const;

    public:
    static const char* const _xsd_tDomainLNGroupYEnum_literals_[4];
    static const value _xsd_tDomainLNGroupYEnum_indexes_[4];
  };

  class tDomainLNGroupZEnum: public ::xml_schema::name
  {
    public:
    enum value
    {
      ZAXN,
      ZBAT,
      ZBSH,
      ZCAB,
      ZCAP,
      ZCON,
      ZGEN,
      ZGIL,
      ZLIN,
      ZMOT,
      ZREA,
      ZRRC,
      ZSAR,
      ZTCF,
      ZTCR
    };

    tDomainLNGroupZEnum (value v);

    tDomainLNGroupZEnum (const char* v);

    tDomainLNGroupZEnum (const ::std::string& v);

    tDomainLNGroupZEnum (const ::xml_schema::name& v);

    tDomainLNGroupZEnum (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tDomainLNGroupZEnum (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tDomainLNGroupZEnum (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tDomainLNGroupZEnum (const tDomainLNGroupZEnum& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual tDomainLNGroupZEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tDomainLNGroupZEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tDomainLNGroupZEnum_convert ();
    }

    protected:
    value
    _xsd_tDomainLNGroupZEnum_convert () const;

    public:
    static const char* const _xsd_tDomainLNGroupZEnum_literals_[15];
    static const value _xsd_tDomainLNGroupZEnum_indexes_[15];
  };

  class tDomainLNEnum: public ::xml_schema::name
  {
    public:
    enum value
    {
      ANCR,
      ARCO,
      ATCC,
      AVCO,
      CILO,
      CSWI,
      CALH,
      CCGR,
      CPOW,
      GAPC,
      GGIO,
      GSAL,
      IHMI,
      IARC,
      ITCI,
      ITMI,
      MMXU,
      MDIF,
      MHAI,
      MHAN,
      MMTR,
      MMXN,
      MSQI,
      MSTA,
      PDIF,
      PDIS,
      PDIR,
      PDOP,
      PDUP,
      PFRC,
      PHAR,
      PHIZ,
      PIOC,
      PMRI,
      PMSS,
      POPF,
      PPAM,
      PSCH,
      PSDE,
      PTEF,
      PTOC,
      PTOF,
      PTOV,
      PTRC,
      PTTR,
      PTUC,
      PTUV,
      PUPF,
      PTUF,
      PVOC,
      PVPH,
      PZSU,
      RSYN,
      RDRE,
      RADR,
      RBDR,
      RDRS,
      RBRF,
      RDIR,
      RFLO,
      RPSB,
      RREC,
      SARC,
      SIMG,
      SIML,
      SPDC,
      TCTR,
      TVTR,
      XCBR,
      XSWI,
      YPTR,
      YEFN,
      YLTC,
      YPSH,
      ZAXN,
      ZBAT,
      ZBSH,
      ZCAB,
      ZCAP,
      ZCON,
      ZGEN,
      ZGIL,
      ZLIN,
      ZMOT,
      ZREA,
      ZRRC,
      ZSAR,
      ZTCF,
      ZTCR
    };

    tDomainLNEnum (value v);

    tDomainLNEnum (const char* v);

    tDomainLNEnum (const ::std::string& v);

    tDomainLNEnum (const ::xml_schema::name& v);

    tDomainLNEnum (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    tDomainLNEnum (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    tDomainLNEnum (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    tDomainLNEnum (const tDomainLNEnum& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual tDomainLNEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tDomainLNEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tDomainLNEnum_convert ();
    }

    protected:
    value
    _xsd_tDomainLNEnum_convert () const;

    public:
    static const char* const _xsd_tDomainLNEnum_literals_[89];
    static const value _xsd_tDomainLNEnum_indexes_[89];
  };

  class tPredefinedLNClassEnum: public ::xml_schema::name
  {
    public:
    enum value
    {
      LPHD,
      LLN0,
      ANCR,
      ARCO,
      ATCC,
      AVCO,
      CILO,
      CSWI,
      CALH,
      CCGR,
      CPOW,
      GAPC,
      GGIO,
      GSAL,
      IHMI,
      IARC,
      ITCI,
      ITMI,
      MMXU,
      MDIF,
      MHAI,
      MHAN,
      MMTR,
      MMXN,
      MSQI,
      MSTA,
      PDIF,
      PDIS,
      PDIR,
      PDOP,
      PDUP,
      PFRC,
      PHAR,
      PHIZ,
      PIOC,
      PMRI,
      PMSS,
      POPF,
      PPAM,
      PSCH,
      PSDE,
      PTEF,
      PTOC,
      PTOF,
      PTOV,
      PTRC,
      PTTR,
      PTUC,
      PTUV,
      PUPF,
      PTUF,
      PVOC,
      PVPH,
      PZSU,
      RSYN,
      RDRE,
      RADR,
      RBDR,
      RDRS,
      RBRF,
      RDIR,
      RFLO,
      RPSB,
      RREC,
      SARC,
      SIMG,
      SIML,
      SPDC,
      TCTR,
      TVTR,
      XCBR,
      XSWI,
      YPTR,
      YEFN,
      YLTC,
      YPSH,
      ZAXN,
      ZBAT,
      ZBSH,
      ZCAB,
      ZCAP,
      ZCON,
      ZGEN,
      ZGIL,
      ZLIN,
      ZMOT,
      ZREA,
      ZRRC,
      ZSAR,
      ZTCF,
      ZTCR
    };

    tPredefinedLNClassEnum (value v);

    tPredefinedLNClassEnum (const char* v);

    tPredefinedLNClassEnum (const ::std::string& v);

    tPredefinedLNClassEnum (const ::xml_schema::name& v);

    tPredefinedLNClassEnum (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    tPredefinedLNClassEnum (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    tPredefinedLNClassEnum (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    tPredefinedLNClassEnum (const tPredefinedLNClassEnum& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    virtual tPredefinedLNClassEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tPredefinedLNClassEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tPredefinedLNClassEnum_convert ();
    }

    protected:
    value
    _xsd_tPredefinedLNClassEnum_convert () const;

    public:
    static const char* const _xsd_tPredefinedLNClassEnum_literals_[91];
    static const value _xsd_tPredefinedLNClassEnum_indexes_[91];
  };

  class tExtensionLNClassEnum: public ::xml_schema::name
  {
    public:
    // Constructors.
    //
    tExtensionLNClassEnum (const char*);

    tExtensionLNClassEnum (const ::std::string&);

    tExtensionLNClassEnum (const ::xml_schema::name&);

    tExtensionLNClassEnum (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    tExtensionLNClassEnum (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    tExtensionLNClassEnum (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    tExtensionLNClassEnum (const tExtensionLNClassEnum& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    virtual tExtensionLNClassEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~tExtensionLNClassEnum ();
  };

  class tLNClassEnum: public ::xml_schema::string
  {
    public:

    tLNClassEnum (const char* v);

    tLNClassEnum (const ::std::string& v);

    tLNClassEnum (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    tLNClassEnum (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    tLNClassEnum (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    tLNClassEnum (const tLNClassEnum& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual tLNClassEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class tPredefinedCDCEnum: public ::xml_schema::name
  {
    public:
    enum value
    {
      SPS,
      DPS,
      INS,
      ACT,
      ACD,
      SEC,
      BCR,
      MV,
      CMV,
      SAV,
      WYE,
      DEL,
      SEQ,
      HMV,
      HWYE,
      HDEL,
      SPC,
      DPC,
      INC,
      BSC,
      ISC,
      APC,
      SPG,
      ING,
      ASG,
      CURVE,
      DPL,
      LPL,
      CSD
    };

    tPredefinedCDCEnum (value v);

    tPredefinedCDCEnum (const char* v);

    tPredefinedCDCEnum (const ::std::string& v);

    tPredefinedCDCEnum (const ::xml_schema::name& v);

    tPredefinedCDCEnum (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    tPredefinedCDCEnum (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    tPredefinedCDCEnum (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    tPredefinedCDCEnum (const tPredefinedCDCEnum& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    virtual tPredefinedCDCEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tPredefinedCDCEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tPredefinedCDCEnum_convert ();
    }

    protected:
    value
    _xsd_tPredefinedCDCEnum_convert () const;

    public:
    static const char* const _xsd_tPredefinedCDCEnum_literals_[29];
    static const value _xsd_tPredefinedCDCEnum_indexes_[29];
  };

  class tExtensionCDCEnum: public ::xml_schema::name
  {
    public:
    // Constructors.
    //
    tExtensionCDCEnum (const char*);

    tExtensionCDCEnum (const ::std::string&);

    tExtensionCDCEnum (const ::xml_schema::name&);

    tExtensionCDCEnum (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    tExtensionCDCEnum (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    tExtensionCDCEnum (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    tExtensionCDCEnum (const tExtensionCDCEnum& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual tExtensionCDCEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~tExtensionCDCEnum ();
  };

  class tCDCEnum: public ::xml_schema::string
  {
    public:

    tCDCEnum (const char* v);

    tCDCEnum (const ::std::string& v);

    tCDCEnum (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    tCDCEnum (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    tCDCEnum (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    tCDCEnum (const tCDCEnum& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual tCDCEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class tTrgOptEnum: public ::xml_schema::name
  {
    public:
    enum value
    {
      dchg,
      qchg,
      dupd,
      none
    };

    tTrgOptEnum (value v);

    tTrgOptEnum (const char* v);

    tTrgOptEnum (const ::std::string& v);

    tTrgOptEnum (const ::xml_schema::name& v);

    tTrgOptEnum (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    tTrgOptEnum (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    tTrgOptEnum (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    tTrgOptEnum (const tTrgOptEnum& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual tTrgOptEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tTrgOptEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tTrgOptEnum_convert ();
    }

    protected:
    value
    _xsd_tTrgOptEnum_convert () const;

    public:
    static const char* const _xsd_tTrgOptEnum_literals_[4];
    static const value _xsd_tTrgOptEnum_indexes_[4];
  };

  class tTrgOptControlEnum: public ::xml_schema::name
  {
    public:
    enum value
    {
      dchg,
      qchg,
      dupd,
      period,
      none
    };

    tTrgOptControlEnum (value v);

    tTrgOptControlEnum (const char* v);

    tTrgOptControlEnum (const ::std::string& v);

    tTrgOptControlEnum (const ::xml_schema::name& v);

    tTrgOptControlEnum (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    tTrgOptControlEnum (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    tTrgOptControlEnum (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    tTrgOptControlEnum (const tTrgOptControlEnum& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    virtual tTrgOptControlEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tTrgOptControlEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tTrgOptControlEnum_convert ();
    }

    protected:
    value
    _xsd_tTrgOptControlEnum_convert () const;

    public:
    static const char* const _xsd_tTrgOptControlEnum_literals_[5];
    static const value _xsd_tTrgOptControlEnum_indexes_[5];
  };

  class tFCEnum: public ::xml_schema::name
  {
    public:
    enum value
    {
      ST,
      MX,
      CO,
      SP,
      SG,
      SE,
      SV,
      CF,
      DC,
      EX
    };

    tFCEnum (value v);

    tFCEnum (const char* v);

    tFCEnum (const ::std::string& v);

    tFCEnum (const ::xml_schema::name& v);

    tFCEnum (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    tFCEnum (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    tFCEnum (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    tFCEnum (const tFCEnum& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual tFCEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tFCEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tFCEnum_convert ();
    }

    protected:
    value
    _xsd_tFCEnum_convert () const;

    public:
    static const char* const _xsd_tFCEnum_literals_[10];
    static const value _xsd_tFCEnum_indexes_[10];
  };

  class tServiceFCEnum: public ::xml_schema::name
  {
    public:
    enum value
    {
      SG,
      BR,
      RP,
      LG,
      GO,
      GS,
      MS,
      US
    };

    tServiceFCEnum (value v);

    tServiceFCEnum (const char* v);

    tServiceFCEnum (const ::std::string& v);

    tServiceFCEnum (const ::xml_schema::name& v);

    tServiceFCEnum (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    tServiceFCEnum (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    tServiceFCEnum (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    tServiceFCEnum (const tServiceFCEnum& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual tServiceFCEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tServiceFCEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tServiceFCEnum_convert ();
    }

    protected:
    value
    _xsd_tServiceFCEnum_convert () const;

    public:
    static const char* const _xsd_tServiceFCEnum_literals_[8];
    static const value _xsd_tServiceFCEnum_indexes_[8];
  };

  class tPredefinedBasicTypeEnum: public ::xml_schema::name
  {
    public:
    enum value
    {
      BOOLEAN,
      INT8,
      INT16,
      INT24,
      INT32,
      INT128,
      INT8U,
      INT16U,
      INT24U,
      INT32U,
      FLOAT32,
      FLOAT64,
      Enum,
      Dbpos,
      Tcmd,
      Quality,
      Timestamp,
      VisString32,
      VisString64,
      VisString129,
      VisString255,
      Octet64,
      Struct,
      EntryTime,
      Unicode255,
      Check
    };

    tPredefinedBasicTypeEnum (value v);

    tPredefinedBasicTypeEnum (const char* v);

    tPredefinedBasicTypeEnum (const ::std::string& v);

    tPredefinedBasicTypeEnum (const ::xml_schema::name& v);

    tPredefinedBasicTypeEnum (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    tPredefinedBasicTypeEnum (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    tPredefinedBasicTypeEnum (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    tPredefinedBasicTypeEnum (const tPredefinedBasicTypeEnum& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    virtual tPredefinedBasicTypeEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tPredefinedBasicTypeEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tPredefinedBasicTypeEnum_convert ();
    }

    protected:
    value
    _xsd_tPredefinedBasicTypeEnum_convert () const;

    public:
    static const char* const _xsd_tPredefinedBasicTypeEnum_literals_[26];
    static const value _xsd_tPredefinedBasicTypeEnum_indexes_[26];
  };

  class tExtensionBasicTypeEnum: public ::xml_schema::name
  {
    public:
    // Constructors.
    //
    tExtensionBasicTypeEnum (const char*);

    tExtensionBasicTypeEnum (const ::std::string&);

    tExtensionBasicTypeEnum (const ::xml_schema::name&);

    tExtensionBasicTypeEnum (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    tExtensionBasicTypeEnum (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    tExtensionBasicTypeEnum (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    tExtensionBasicTypeEnum (const tExtensionBasicTypeEnum& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    virtual tExtensionBasicTypeEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~tExtensionBasicTypeEnum ();
  };

  class tBasicTypeEnum: public ::xml_schema::string
  {
    public:

    tBasicTypeEnum (const char* v);

    tBasicTypeEnum (const ::std::string& v);

    tBasicTypeEnum (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    tBasicTypeEnum (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    tBasicTypeEnum (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    tBasicTypeEnum (const tBasicTypeEnum& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual tBasicTypeEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class tValKindEnum: public ::xml_schema::name
  {
    public:
    enum value
    {
      Spec,
      Conf,
      RO,
      Set
    };

    tValKindEnum (value v);

    tValKindEnum (const char* v);

    tValKindEnum (const ::std::string& v);

    tValKindEnum (const ::xml_schema::name& v);

    tValKindEnum (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    tValKindEnum (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    tValKindEnum (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    tValKindEnum (const tValKindEnum& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual tValKindEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tValKindEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tValKindEnum_convert ();
    }

    protected:
    value
    _xsd_tValKindEnum_convert () const;

    public:
    static const char* const _xsd_tValKindEnum_literals_[4];
    static const value _xsd_tValKindEnum_indexes_[4];
  };

  class tGSEControlTypeEnum: public ::xml_schema::name
  {
    public:
    enum value
    {
      GSSE,
      GOOSE
    };

    tGSEControlTypeEnum (value v);

    tGSEControlTypeEnum (const char* v);

    tGSEControlTypeEnum (const ::std::string& v);

    tGSEControlTypeEnum (const ::xml_schema::name& v);

    tGSEControlTypeEnum (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tGSEControlTypeEnum (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tGSEControlTypeEnum (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tGSEControlTypeEnum (const tGSEControlTypeEnum& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual tGSEControlTypeEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tGSEControlTypeEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tGSEControlTypeEnum_convert ();
    }

    protected:
    value
    _xsd_tGSEControlTypeEnum_convert () const;

    public:
    static const char* const _xsd_tGSEControlTypeEnum_literals_[2];
    static const value _xsd_tGSEControlTypeEnum_indexes_[2];
  };

  class tSIUnitEnum: public ::xml_schema::token
  {
    public:
    enum value
    {
      none,
      m,
      kg,
      s,
      A,
      K,
      mol,
      cd,
      deg,
      rad,
      sr,
      Gy,
      q,
      cxx_C,
      Sv,
      F,
      C,
      S,
      H,
      V,
      ohm,
      J,
      N,
      Hz,
      lx,
      Lm,
      Wb,
      T,
      W,
      Pa,
      m_2,
      m_3,
      m_s,
      m_s_2,
      m_3_s,
      m_m_3,
      M,
      kg_m_3,
      m_2_s,
      W_m_K,
      J_K,
      ppm,
      s__1,
      rad_s,
      VA,
      Watts,
      VAr,
      phi,
      cos_phi,
      Vs,
      V_2,
      As,
      A_2,
      A_2_s,
      VAh,
      Wh,
      VArh,
      V_Hz,
      b_s
    };

    tSIUnitEnum (value v);

    tSIUnitEnum (const char* v);

    tSIUnitEnum (const ::std::string& v);

    tSIUnitEnum (const ::xml_schema::token& v);

    tSIUnitEnum (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    tSIUnitEnum (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    tSIUnitEnum (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    tSIUnitEnum (const tSIUnitEnum& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual tSIUnitEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tSIUnitEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tSIUnitEnum_convert ();
    }

    protected:
    value
    _xsd_tSIUnitEnum_convert () const;

    public:
    static const char* const _xsd_tSIUnitEnum_literals_[59];
    static const value _xsd_tSIUnitEnum_indexes_[59];
  };

  class tUnitMultiplierEnum: public ::xml_schema::normalized_string
  {
    public:
    enum value
    {
      empty,
      m,
      k,
      M,
      mu,
      y,
      z,
      a,
      f,
      p,
      n,
      c,
      d,
      da,
      h,
      G,
      T,
      P,
      E,
      Z,
      Y
    };

    tUnitMultiplierEnum (value v);

    tUnitMultiplierEnum (const char* v);

    tUnitMultiplierEnum (const ::std::string& v);

    tUnitMultiplierEnum (const ::xml_schema::normalized_string& v);

    tUnitMultiplierEnum (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tUnitMultiplierEnum (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tUnitMultiplierEnum (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    tUnitMultiplierEnum (const tUnitMultiplierEnum& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual tUnitMultiplierEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tUnitMultiplierEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tUnitMultiplierEnum_convert ();
    }

    protected:
    value
    _xsd_tUnitMultiplierEnum_convert () const;

    public:
    static const char* const _xsd_tUnitMultiplierEnum_literals_[21];
    static const value _xsd_tUnitMultiplierEnum_indexes_[21];
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace SCL
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // XSD_SCL_ENUMS_HXX
