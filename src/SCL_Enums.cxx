// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SCL_Enums.hxx"

namespace SCL
{
  // tPredefinedPTypeEnum
  // 

  tPredefinedPTypeEnum::
  tPredefinedPTypeEnum (value v)
  : ::xml_schema::name (_xsd_tPredefinedPTypeEnum_literals_[v])
  {
  }

  tPredefinedPTypeEnum::
  tPredefinedPTypeEnum (const char* v)
  : ::xml_schema::name (v)
  {
  }

  tPredefinedPTypeEnum::
  tPredefinedPTypeEnum (const ::std::string& v)
  : ::xml_schema::name (v)
  {
  }

  tPredefinedPTypeEnum::
  tPredefinedPTypeEnum (const ::xml_schema::name& v)
  : ::xml_schema::name (v)
  {
  }

  tPredefinedPTypeEnum::
  tPredefinedPTypeEnum (const tPredefinedPTypeEnum& v,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::name (v, f, c)
  {
  }

  tPredefinedPTypeEnum& tPredefinedPTypeEnum::
  operator= (value v)
  {
    static_cast< ::xml_schema::name& > (*this) = 
    ::xml_schema::name (_xsd_tPredefinedPTypeEnum_literals_[v]);

    return *this;
  }


  // tExtensionPTypeEnum
  // 


  // tPTypeEnum
  //

  tPTypeEnum::
  tPTypeEnum (const char* s)
  : ::xml_schema::string (s)
  {
  }

  tPTypeEnum::
  tPTypeEnum (const ::std::string& s)
  : ::xml_schema::string (s)
  {
  }

  tPTypeEnum::
  tPTypeEnum (const tPTypeEnum& o,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::string (o, f, c)
  {
  }

  // tPredefinedAttributeNameEnum
  // 

  tPredefinedAttributeNameEnum::
  tPredefinedAttributeNameEnum (value v)
  : ::xml_schema::name (_xsd_tPredefinedAttributeNameEnum_literals_[v])
  {
  }

  tPredefinedAttributeNameEnum::
  tPredefinedAttributeNameEnum (const char* v)
  : ::xml_schema::name (v)
  {
  }

  tPredefinedAttributeNameEnum::
  tPredefinedAttributeNameEnum (const ::std::string& v)
  : ::xml_schema::name (v)
  {
  }

  tPredefinedAttributeNameEnum::
  tPredefinedAttributeNameEnum (const ::xml_schema::name& v)
  : ::xml_schema::name (v)
  {
  }

  tPredefinedAttributeNameEnum::
  tPredefinedAttributeNameEnum (const tPredefinedAttributeNameEnum& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::name (v, f, c)
  {
  }

  tPredefinedAttributeNameEnum& tPredefinedAttributeNameEnum::
  operator= (value v)
  {
    static_cast< ::xml_schema::name& > (*this) = 
    ::xml_schema::name (_xsd_tPredefinedAttributeNameEnum_literals_[v]);

    return *this;
  }


  // tExtensionAttributeNameEnum
  // 


  // tAttributeNameEnum
  //

  tAttributeNameEnum::
  tAttributeNameEnum (const char* s)
  : ::xml_schema::string (s)
  {
  }

  tAttributeNameEnum::
  tAttributeNameEnum (const ::std::string& s)
  : ::xml_schema::string (s)
  {
  }

  tAttributeNameEnum::
  tAttributeNameEnum (const tAttributeNameEnum& o,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::string (o, f, c)
  {
  }

  // tPredefinedCommonConductingEquipmentEnum
  // 

  tPredefinedCommonConductingEquipmentEnum::
  tPredefinedCommonConductingEquipmentEnum (value v)
  : ::xml_schema::name (_xsd_tPredefinedCommonConductingEquipmentEnum_literals_[v])
  {
  }

  tPredefinedCommonConductingEquipmentEnum::
  tPredefinedCommonConductingEquipmentEnum (const char* v)
  : ::xml_schema::name (v)
  {
  }

  tPredefinedCommonConductingEquipmentEnum::
  tPredefinedCommonConductingEquipmentEnum (const ::std::string& v)
  : ::xml_schema::name (v)
  {
  }

  tPredefinedCommonConductingEquipmentEnum::
  tPredefinedCommonConductingEquipmentEnum (const ::xml_schema::name& v)
  : ::xml_schema::name (v)
  {
  }

  tPredefinedCommonConductingEquipmentEnum::
  tPredefinedCommonConductingEquipmentEnum (const tPredefinedCommonConductingEquipmentEnum& v,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::name (v, f, c)
  {
  }

  tPredefinedCommonConductingEquipmentEnum& tPredefinedCommonConductingEquipmentEnum::
  operator= (value v)
  {
    static_cast< ::xml_schema::name& > (*this) = 
    ::xml_schema::name (_xsd_tPredefinedCommonConductingEquipmentEnum_literals_[v]);

    return *this;
  }


  // tExtensionEquipmentEnum
  // 


  // tCommonConductingEquipmentEnum
  //

  tCommonConductingEquipmentEnum::
  tCommonConductingEquipmentEnum (const char* s)
  : ::xml_schema::string (s)
  {
  }

  tCommonConductingEquipmentEnum::
  tCommonConductingEquipmentEnum (const ::std::string& s)
  : ::xml_schema::string (s)
  {
  }

  tCommonConductingEquipmentEnum::
  tCommonConductingEquipmentEnum (const tCommonConductingEquipmentEnum& o,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::string (o, f, c)
  {
  }

  // tPowerTransformerEnum
  // 

  tPowerTransformerEnum::
  tPowerTransformerEnum (value v)
  : ::xml_schema::name (_xsd_tPowerTransformerEnum_literals_[v])
  {
  }

  tPowerTransformerEnum::
  tPowerTransformerEnum (const char* v)
  : ::xml_schema::name (v)
  {
  }

  tPowerTransformerEnum::
  tPowerTransformerEnum (const ::std::string& v)
  : ::xml_schema::name (v)
  {
  }

  tPowerTransformerEnum::
  tPowerTransformerEnum (const ::xml_schema::name& v)
  : ::xml_schema::name (v)
  {
  }

  tPowerTransformerEnum::
  tPowerTransformerEnum (const tPowerTransformerEnum& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::name (v, f, c)
  {
  }

  tPowerTransformerEnum& tPowerTransformerEnum::
  operator= (value v)
  {
    static_cast< ::xml_schema::name& > (*this) = 
    ::xml_schema::name (_xsd_tPowerTransformerEnum_literals_[v]);

    return *this;
  }


  // tTransformerWindingEnum
  // 

  tTransformerWindingEnum::
  tTransformerWindingEnum (value v)
  : ::xml_schema::name (_xsd_tTransformerWindingEnum_literals_[v])
  {
  }

  tTransformerWindingEnum::
  tTransformerWindingEnum (const char* v)
  : ::xml_schema::name (v)
  {
  }

  tTransformerWindingEnum::
  tTransformerWindingEnum (const ::std::string& v)
  : ::xml_schema::name (v)
  {
  }

  tTransformerWindingEnum::
  tTransformerWindingEnum (const ::xml_schema::name& v)
  : ::xml_schema::name (v)
  {
  }

  tTransformerWindingEnum::
  tTransformerWindingEnum (const tTransformerWindingEnum& v,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::name (v, f, c)
  {
  }

  tTransformerWindingEnum& tTransformerWindingEnum::
  operator= (value v)
  {
    static_cast< ::xml_schema::name& > (*this) = 
    ::xml_schema::name (_xsd_tTransformerWindingEnum_literals_[v]);

    return *this;
  }


  // tPredefinedEquipmentEnum
  //

  tPredefinedEquipmentEnum::
  tPredefinedEquipmentEnum (const char* s)
  : ::xml_schema::string (s)
  {
  }

  tPredefinedEquipmentEnum::
  tPredefinedEquipmentEnum (const ::std::string& s)
  : ::xml_schema::string (s)
  {
  }

  tPredefinedEquipmentEnum::
  tPredefinedEquipmentEnum (const tPredefinedEquipmentEnum& o,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::string (o, f, c)
  {
  }

  // tEquipmentEnum
  //

  tEquipmentEnum::
  tEquipmentEnum (const char* s)
  : ::xml_schema::string (s)
  {
  }

  tEquipmentEnum::
  tEquipmentEnum (const ::std::string& s)
  : ::xml_schema::string (s)
  {
  }

  tEquipmentEnum::
  tEquipmentEnum (const tEquipmentEnum& o,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::string (o, f, c)
  {
  }

  // tPredefinedGeneralEquipmentEnum
  // 

  tPredefinedGeneralEquipmentEnum::
  tPredefinedGeneralEquipmentEnum (value v)
  : ::xml_schema::name (_xsd_tPredefinedGeneralEquipmentEnum_literals_[v])
  {
  }

  tPredefinedGeneralEquipmentEnum::
  tPredefinedGeneralEquipmentEnum (const char* v)
  : ::xml_schema::name (v)
  {
  }

  tPredefinedGeneralEquipmentEnum::
  tPredefinedGeneralEquipmentEnum (const ::std::string& v)
  : ::xml_schema::name (v)
  {
  }

  tPredefinedGeneralEquipmentEnum::
  tPredefinedGeneralEquipmentEnum (const ::xml_schema::name& v)
  : ::xml_schema::name (v)
  {
  }

  tPredefinedGeneralEquipmentEnum::
  tPredefinedGeneralEquipmentEnum (const tPredefinedGeneralEquipmentEnum& v,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::name (v, f, c)
  {
  }

  tPredefinedGeneralEquipmentEnum& tPredefinedGeneralEquipmentEnum::
  operator= (value v)
  {
    static_cast< ::xml_schema::name& > (*this) = 
    ::xml_schema::name (_xsd_tPredefinedGeneralEquipmentEnum_literals_[v]);

    return *this;
  }


  // tExtensionGeneralEquipmentEnum
  // 


  // tGeneralEquipmentEnum
  //

  tGeneralEquipmentEnum::
  tGeneralEquipmentEnum (const char* s)
  : ::xml_schema::string (s)
  {
  }

  tGeneralEquipmentEnum::
  tGeneralEquipmentEnum (const ::std::string& s)
  : ::xml_schema::string (s)
  {
  }

  tGeneralEquipmentEnum::
  tGeneralEquipmentEnum (const tGeneralEquipmentEnum& o,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::string (o, f, c)
  {
  }

  // tServiceSettingsEnum
  // 

  tServiceSettingsEnum::
  tServiceSettingsEnum (value v)
  : ::xml_schema::name (_xsd_tServiceSettingsEnum_literals_[v])
  {
  }

  tServiceSettingsEnum::
  tServiceSettingsEnum (const char* v)
  : ::xml_schema::name (v)
  {
  }

  tServiceSettingsEnum::
  tServiceSettingsEnum (const ::std::string& v)
  : ::xml_schema::name (v)
  {
  }

  tServiceSettingsEnum::
  tServiceSettingsEnum (const ::xml_schema::name& v)
  : ::xml_schema::name (v)
  {
  }

  tServiceSettingsEnum::
  tServiceSettingsEnum (const tServiceSettingsEnum& v,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::name (v, f, c)
  {
  }

  tServiceSettingsEnum& tServiceSettingsEnum::
  operator= (value v)
  {
    static_cast< ::xml_schema::name& > (*this) = 
    ::xml_schema::name (_xsd_tServiceSettingsEnum_literals_[v]);

    return *this;
  }


  // tPhaseEnum
  // 

  tPhaseEnum::
  tPhaseEnum (value v)
  : ::xml_schema::name (_xsd_tPhaseEnum_literals_[v])
  {
  }

  tPhaseEnum::
  tPhaseEnum (const char* v)
  : ::xml_schema::name (v)
  {
  }

  tPhaseEnum::
  tPhaseEnum (const ::std::string& v)
  : ::xml_schema::name (v)
  {
  }

  tPhaseEnum::
  tPhaseEnum (const ::xml_schema::name& v)
  : ::xml_schema::name (v)
  {
  }

  tPhaseEnum::
  tPhaseEnum (const tPhaseEnum& v,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::name (v, f, c)
  {
  }

  tPhaseEnum& tPhaseEnum::
  operator= (value v)
  {
    static_cast< ::xml_schema::name& > (*this) = 
    ::xml_schema::name (_xsd_tPhaseEnum_literals_[v]);

    return *this;
  }


  // tAuthenticationEnum
  // 

  tAuthenticationEnum::
  tAuthenticationEnum (value v)
  : ::xml_schema::name (_xsd_tAuthenticationEnum_literals_[v])
  {
  }

  tAuthenticationEnum::
  tAuthenticationEnum (const char* v)
  : ::xml_schema::name (v)
  {
  }

  tAuthenticationEnum::
  tAuthenticationEnum (const ::std::string& v)
  : ::xml_schema::name (v)
  {
  }

  tAuthenticationEnum::
  tAuthenticationEnum (const ::xml_schema::name& v)
  : ::xml_schema::name (v)
  {
  }

  tAuthenticationEnum::
  tAuthenticationEnum (const tAuthenticationEnum& v,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (v, f, c)
  {
  }

  tAuthenticationEnum& tAuthenticationEnum::
  operator= (value v)
  {
    static_cast< ::xml_schema::name& > (*this) = 
    ::xml_schema::name (_xsd_tAuthenticationEnum_literals_[v]);

    return *this;
  }


  // tAssociationKindEnum
  // 

  tAssociationKindEnum::
  tAssociationKindEnum (value v)
  : ::xml_schema::token (_xsd_tAssociationKindEnum_literals_[v])
  {
  }

  tAssociationKindEnum::
  tAssociationKindEnum (const char* v)
  : ::xml_schema::token (v)
  {
  }

  tAssociationKindEnum::
  tAssociationKindEnum (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  tAssociationKindEnum::
  tAssociationKindEnum (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  tAssociationKindEnum::
  tAssociationKindEnum (const tAssociationKindEnum& v,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  tAssociationKindEnum& tAssociationKindEnum::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_tAssociationKindEnum_literals_[v]);

    return *this;
  }


  // tLPHDEnum
  // 

  tLPHDEnum::
  tLPHDEnum (value v)
  : ::xml_schema::name (_xsd_tLPHDEnum_literals_[v])
  {
  }

  tLPHDEnum::
  tLPHDEnum (const char* v)
  : ::xml_schema::name (v)
  {
  }

  tLPHDEnum::
  tLPHDEnum (const ::std::string& v)
  : ::xml_schema::name (v)
  {
  }

  tLPHDEnum::
  tLPHDEnum (const ::xml_schema::name& v)
  : ::xml_schema::name (v)
  {
  }

  tLPHDEnum::
  tLPHDEnum (const tLPHDEnum& v,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::name (v, f, c)
  {
  }

  tLPHDEnum& tLPHDEnum::
  operator= (value v)
  {
    static_cast< ::xml_schema::name& > (*this) = 
    ::xml_schema::name (_xsd_tLPHDEnum_literals_[v]);

    return *this;
  }


  // tLLN0Enum
  // 

  tLLN0Enum::
  tLLN0Enum (value v)
  : ::xml_schema::name (_xsd_tLLN0Enum_literals_[v])
  {
  }

  tLLN0Enum::
  tLLN0Enum (const char* v)
  : ::xml_schema::name (v)
  {
  }

  tLLN0Enum::
  tLLN0Enum (const ::std::string& v)
  : ::xml_schema::name (v)
  {
  }

  tLLN0Enum::
  tLLN0Enum (const ::xml_schema::name& v)
  : ::xml_schema::name (v)
  {
  }

  tLLN0Enum::
  tLLN0Enum (const tLLN0Enum& v,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::name (v, f, c)
  {
  }

  tLLN0Enum& tLLN0Enum::
  operator= (value v)
  {
    static_cast< ::xml_schema::name& > (*this) = 
    ::xml_schema::name (_xsd_tLLN0Enum_literals_[v]);

    return *this;
  }


  // tDomainLNGroupAEnum
  // 

  tDomainLNGroupAEnum::
  tDomainLNGroupAEnum (value v)
  : ::xml_schema::name (_xsd_tDomainLNGroupAEnum_literals_[v])
  {
  }

  tDomainLNGroupAEnum::
  tDomainLNGroupAEnum (const char* v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNGroupAEnum::
  tDomainLNGroupAEnum (const ::std::string& v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNGroupAEnum::
  tDomainLNGroupAEnum (const ::xml_schema::name& v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNGroupAEnum::
  tDomainLNGroupAEnum (const tDomainLNGroupAEnum& v,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (v, f, c)
  {
  }

  tDomainLNGroupAEnum& tDomainLNGroupAEnum::
  operator= (value v)
  {
    static_cast< ::xml_schema::name& > (*this) = 
    ::xml_schema::name (_xsd_tDomainLNGroupAEnum_literals_[v]);

    return *this;
  }


  // tDomainLNGroupCEnum
  // 

  tDomainLNGroupCEnum::
  tDomainLNGroupCEnum (value v)
  : ::xml_schema::name (_xsd_tDomainLNGroupCEnum_literals_[v])
  {
  }

  tDomainLNGroupCEnum::
  tDomainLNGroupCEnum (const char* v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNGroupCEnum::
  tDomainLNGroupCEnum (const ::std::string& v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNGroupCEnum::
  tDomainLNGroupCEnum (const ::xml_schema::name& v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNGroupCEnum::
  tDomainLNGroupCEnum (const tDomainLNGroupCEnum& v,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (v, f, c)
  {
  }

  tDomainLNGroupCEnum& tDomainLNGroupCEnum::
  operator= (value v)
  {
    static_cast< ::xml_schema::name& > (*this) = 
    ::xml_schema::name (_xsd_tDomainLNGroupCEnum_literals_[v]);

    return *this;
  }


  // tDomainLNGroupGEnum
  // 

  tDomainLNGroupGEnum::
  tDomainLNGroupGEnum (value v)
  : ::xml_schema::name (_xsd_tDomainLNGroupGEnum_literals_[v])
  {
  }

  tDomainLNGroupGEnum::
  tDomainLNGroupGEnum (const char* v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNGroupGEnum::
  tDomainLNGroupGEnum (const ::std::string& v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNGroupGEnum::
  tDomainLNGroupGEnum (const ::xml_schema::name& v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNGroupGEnum::
  tDomainLNGroupGEnum (const tDomainLNGroupGEnum& v,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (v, f, c)
  {
  }

  tDomainLNGroupGEnum& tDomainLNGroupGEnum::
  operator= (value v)
  {
    static_cast< ::xml_schema::name& > (*this) = 
    ::xml_schema::name (_xsd_tDomainLNGroupGEnum_literals_[v]);

    return *this;
  }


  // tDomainLNGroupIEnum
  // 

  tDomainLNGroupIEnum::
  tDomainLNGroupIEnum (value v)
  : ::xml_schema::name (_xsd_tDomainLNGroupIEnum_literals_[v])
  {
  }

  tDomainLNGroupIEnum::
  tDomainLNGroupIEnum (const char* v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNGroupIEnum::
  tDomainLNGroupIEnum (const ::std::string& v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNGroupIEnum::
  tDomainLNGroupIEnum (const ::xml_schema::name& v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNGroupIEnum::
  tDomainLNGroupIEnum (const tDomainLNGroupIEnum& v,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (v, f, c)
  {
  }

  tDomainLNGroupIEnum& tDomainLNGroupIEnum::
  operator= (value v)
  {
    static_cast< ::xml_schema::name& > (*this) = 
    ::xml_schema::name (_xsd_tDomainLNGroupIEnum_literals_[v]);

    return *this;
  }


  // tDomainLNGroupMEnum
  // 

  tDomainLNGroupMEnum::
  tDomainLNGroupMEnum (value v)
  : ::xml_schema::name (_xsd_tDomainLNGroupMEnum_literals_[v])
  {
  }

  tDomainLNGroupMEnum::
  tDomainLNGroupMEnum (const char* v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNGroupMEnum::
  tDomainLNGroupMEnum (const ::std::string& v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNGroupMEnum::
  tDomainLNGroupMEnum (const ::xml_schema::name& v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNGroupMEnum::
  tDomainLNGroupMEnum (const tDomainLNGroupMEnum& v,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (v, f, c)
  {
  }

  tDomainLNGroupMEnum& tDomainLNGroupMEnum::
  operator= (value v)
  {
    static_cast< ::xml_schema::name& > (*this) = 
    ::xml_schema::name (_xsd_tDomainLNGroupMEnum_literals_[v]);

    return *this;
  }


  // tDomainLNGroupPEnum
  // 

  tDomainLNGroupPEnum::
  tDomainLNGroupPEnum (value v)
  : ::xml_schema::name (_xsd_tDomainLNGroupPEnum_literals_[v])
  {
  }

  tDomainLNGroupPEnum::
  tDomainLNGroupPEnum (const char* v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNGroupPEnum::
  tDomainLNGroupPEnum (const ::std::string& v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNGroupPEnum::
  tDomainLNGroupPEnum (const ::xml_schema::name& v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNGroupPEnum::
  tDomainLNGroupPEnum (const tDomainLNGroupPEnum& v,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (v, f, c)
  {
  }

  tDomainLNGroupPEnum& tDomainLNGroupPEnum::
  operator= (value v)
  {
    static_cast< ::xml_schema::name& > (*this) = 
    ::xml_schema::name (_xsd_tDomainLNGroupPEnum_literals_[v]);

    return *this;
  }


  // tDomainLNGroupREnum
  // 

  tDomainLNGroupREnum::
  tDomainLNGroupREnum (value v)
  : ::xml_schema::name (_xsd_tDomainLNGroupREnum_literals_[v])
  {
  }

  tDomainLNGroupREnum::
  tDomainLNGroupREnum (const char* v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNGroupREnum::
  tDomainLNGroupREnum (const ::std::string& v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNGroupREnum::
  tDomainLNGroupREnum (const ::xml_schema::name& v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNGroupREnum::
  tDomainLNGroupREnum (const tDomainLNGroupREnum& v,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (v, f, c)
  {
  }

  tDomainLNGroupREnum& tDomainLNGroupREnum::
  operator= (value v)
  {
    static_cast< ::xml_schema::name& > (*this) = 
    ::xml_schema::name (_xsd_tDomainLNGroupREnum_literals_[v]);

    return *this;
  }


  // tDomainLNGroupSEnum
  // 

  tDomainLNGroupSEnum::
  tDomainLNGroupSEnum (value v)
  : ::xml_schema::name (_xsd_tDomainLNGroupSEnum_literals_[v])
  {
  }

  tDomainLNGroupSEnum::
  tDomainLNGroupSEnum (const char* v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNGroupSEnum::
  tDomainLNGroupSEnum (const ::std::string& v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNGroupSEnum::
  tDomainLNGroupSEnum (const ::xml_schema::name& v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNGroupSEnum::
  tDomainLNGroupSEnum (const tDomainLNGroupSEnum& v,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (v, f, c)
  {
  }

  tDomainLNGroupSEnum& tDomainLNGroupSEnum::
  operator= (value v)
  {
    static_cast< ::xml_schema::name& > (*this) = 
    ::xml_schema::name (_xsd_tDomainLNGroupSEnum_literals_[v]);

    return *this;
  }


  // tDomainLNGroupTEnum
  // 

  tDomainLNGroupTEnum::
  tDomainLNGroupTEnum (value v)
  : ::xml_schema::name (_xsd_tDomainLNGroupTEnum_literals_[v])
  {
  }

  tDomainLNGroupTEnum::
  tDomainLNGroupTEnum (const char* v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNGroupTEnum::
  tDomainLNGroupTEnum (const ::std::string& v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNGroupTEnum::
  tDomainLNGroupTEnum (const ::xml_schema::name& v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNGroupTEnum::
  tDomainLNGroupTEnum (const tDomainLNGroupTEnum& v,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (v, f, c)
  {
  }

  tDomainLNGroupTEnum& tDomainLNGroupTEnum::
  operator= (value v)
  {
    static_cast< ::xml_schema::name& > (*this) = 
    ::xml_schema::name (_xsd_tDomainLNGroupTEnum_literals_[v]);

    return *this;
  }


  // tDomainLNGroupXEnum
  // 

  tDomainLNGroupXEnum::
  tDomainLNGroupXEnum (value v)
  : ::xml_schema::name (_xsd_tDomainLNGroupXEnum_literals_[v])
  {
  }

  tDomainLNGroupXEnum::
  tDomainLNGroupXEnum (const char* v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNGroupXEnum::
  tDomainLNGroupXEnum (const ::std::string& v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNGroupXEnum::
  tDomainLNGroupXEnum (const ::xml_schema::name& v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNGroupXEnum::
  tDomainLNGroupXEnum (const tDomainLNGroupXEnum& v,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (v, f, c)
  {
  }

  tDomainLNGroupXEnum& tDomainLNGroupXEnum::
  operator= (value v)
  {
    static_cast< ::xml_schema::name& > (*this) = 
    ::xml_schema::name (_xsd_tDomainLNGroupXEnum_literals_[v]);

    return *this;
  }


  // tDomainLNGroupYEnum
  // 

  tDomainLNGroupYEnum::
  tDomainLNGroupYEnum (value v)
  : ::xml_schema::name (_xsd_tDomainLNGroupYEnum_literals_[v])
  {
  }

  tDomainLNGroupYEnum::
  tDomainLNGroupYEnum (const char* v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNGroupYEnum::
  tDomainLNGroupYEnum (const ::std::string& v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNGroupYEnum::
  tDomainLNGroupYEnum (const ::xml_schema::name& v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNGroupYEnum::
  tDomainLNGroupYEnum (const tDomainLNGroupYEnum& v,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (v, f, c)
  {
  }

  tDomainLNGroupYEnum& tDomainLNGroupYEnum::
  operator= (value v)
  {
    static_cast< ::xml_schema::name& > (*this) = 
    ::xml_schema::name (_xsd_tDomainLNGroupYEnum_literals_[v]);

    return *this;
  }


  // tDomainLNGroupZEnum
  // 

  tDomainLNGroupZEnum::
  tDomainLNGroupZEnum (value v)
  : ::xml_schema::name (_xsd_tDomainLNGroupZEnum_literals_[v])
  {
  }

  tDomainLNGroupZEnum::
  tDomainLNGroupZEnum (const char* v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNGroupZEnum::
  tDomainLNGroupZEnum (const ::std::string& v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNGroupZEnum::
  tDomainLNGroupZEnum (const ::xml_schema::name& v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNGroupZEnum::
  tDomainLNGroupZEnum (const tDomainLNGroupZEnum& v,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (v, f, c)
  {
  }

  tDomainLNGroupZEnum& tDomainLNGroupZEnum::
  operator= (value v)
  {
    static_cast< ::xml_schema::name& > (*this) = 
    ::xml_schema::name (_xsd_tDomainLNGroupZEnum_literals_[v]);

    return *this;
  }


  // tDomainLNEnum
  // 

  tDomainLNEnum::
  tDomainLNEnum (value v)
  : ::xml_schema::name (_xsd_tDomainLNEnum_literals_[v])
  {
  }

  tDomainLNEnum::
  tDomainLNEnum (const char* v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNEnum::
  tDomainLNEnum (const ::std::string& v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNEnum::
  tDomainLNEnum (const ::xml_schema::name& v)
  : ::xml_schema::name (v)
  {
  }

  tDomainLNEnum::
  tDomainLNEnum (const tDomainLNEnum& v,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::name (v, f, c)
  {
  }

  tDomainLNEnum& tDomainLNEnum::
  operator= (value v)
  {
    static_cast< ::xml_schema::name& > (*this) = 
    ::xml_schema::name (_xsd_tDomainLNEnum_literals_[v]);

    return *this;
  }


  // tPredefinedLNClassEnum
  // 

  tPredefinedLNClassEnum::
  tPredefinedLNClassEnum (value v)
  : ::xml_schema::name (_xsd_tPredefinedLNClassEnum_literals_[v])
  {
  }

  tPredefinedLNClassEnum::
  tPredefinedLNClassEnum (const char* v)
  : ::xml_schema::name (v)
  {
  }

  tPredefinedLNClassEnum::
  tPredefinedLNClassEnum (const ::std::string& v)
  : ::xml_schema::name (v)
  {
  }

  tPredefinedLNClassEnum::
  tPredefinedLNClassEnum (const ::xml_schema::name& v)
  : ::xml_schema::name (v)
  {
  }

  tPredefinedLNClassEnum::
  tPredefinedLNClassEnum (const tPredefinedLNClassEnum& v,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::name (v, f, c)
  {
  }

  tPredefinedLNClassEnum& tPredefinedLNClassEnum::
  operator= (value v)
  {
    static_cast< ::xml_schema::name& > (*this) = 
    ::xml_schema::name (_xsd_tPredefinedLNClassEnum_literals_[v]);

    return *this;
  }


  // tExtensionLNClassEnum
  // 


  // tLNClassEnum
  //

  tLNClassEnum::
  tLNClassEnum (const char* s)
  : ::xml_schema::string (s)
  {
  }

  tLNClassEnum::
  tLNClassEnum (const ::std::string& s)
  : ::xml_schema::string (s)
  {
  }

  tLNClassEnum::
  tLNClassEnum (const tLNClassEnum& o,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::string (o, f, c)
  {
  }

  // tPredefinedCDCEnum
  // 

  tPredefinedCDCEnum::
  tPredefinedCDCEnum (value v)
  : ::xml_schema::name (_xsd_tPredefinedCDCEnum_literals_[v])
  {
  }

  tPredefinedCDCEnum::
  tPredefinedCDCEnum (const char* v)
  : ::xml_schema::name (v)
  {
  }

  tPredefinedCDCEnum::
  tPredefinedCDCEnum (const ::std::string& v)
  : ::xml_schema::name (v)
  {
  }

  tPredefinedCDCEnum::
  tPredefinedCDCEnum (const ::xml_schema::name& v)
  : ::xml_schema::name (v)
  {
  }

  tPredefinedCDCEnum::
  tPredefinedCDCEnum (const tPredefinedCDCEnum& v,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::name (v, f, c)
  {
  }

  tPredefinedCDCEnum& tPredefinedCDCEnum::
  operator= (value v)
  {
    static_cast< ::xml_schema::name& > (*this) = 
    ::xml_schema::name (_xsd_tPredefinedCDCEnum_literals_[v]);

    return *this;
  }


  // tExtensionCDCEnum
  // 


  // tCDCEnum
  //

  tCDCEnum::
  tCDCEnum (const char* s)
  : ::xml_schema::string (s)
  {
  }

  tCDCEnum::
  tCDCEnum (const ::std::string& s)
  : ::xml_schema::string (s)
  {
  }

  tCDCEnum::
  tCDCEnum (const tCDCEnum& o,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::string (o, f, c)
  {
  }

  // tTrgOptEnum
  // 

  tTrgOptEnum::
  tTrgOptEnum (value v)
  : ::xml_schema::name (_xsd_tTrgOptEnum_literals_[v])
  {
  }

  tTrgOptEnum::
  tTrgOptEnum (const char* v)
  : ::xml_schema::name (v)
  {
  }

  tTrgOptEnum::
  tTrgOptEnum (const ::std::string& v)
  : ::xml_schema::name (v)
  {
  }

  tTrgOptEnum::
  tTrgOptEnum (const ::xml_schema::name& v)
  : ::xml_schema::name (v)
  {
  }

  tTrgOptEnum::
  tTrgOptEnum (const tTrgOptEnum& v,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::name (v, f, c)
  {
  }

  tTrgOptEnum& tTrgOptEnum::
  operator= (value v)
  {
    static_cast< ::xml_schema::name& > (*this) = 
    ::xml_schema::name (_xsd_tTrgOptEnum_literals_[v]);

    return *this;
  }


  // tTrgOptControlEnum
  // 

  tTrgOptControlEnum::
  tTrgOptControlEnum (value v)
  : ::xml_schema::name (_xsd_tTrgOptControlEnum_literals_[v])
  {
  }

  tTrgOptControlEnum::
  tTrgOptControlEnum (const char* v)
  : ::xml_schema::name (v)
  {
  }

  tTrgOptControlEnum::
  tTrgOptControlEnum (const ::std::string& v)
  : ::xml_schema::name (v)
  {
  }

  tTrgOptControlEnum::
  tTrgOptControlEnum (const ::xml_schema::name& v)
  : ::xml_schema::name (v)
  {
  }

  tTrgOptControlEnum::
  tTrgOptControlEnum (const tTrgOptControlEnum& v,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::name (v, f, c)
  {
  }

  tTrgOptControlEnum& tTrgOptControlEnum::
  operator= (value v)
  {
    static_cast< ::xml_schema::name& > (*this) = 
    ::xml_schema::name (_xsd_tTrgOptControlEnum_literals_[v]);

    return *this;
  }


  // tFCEnum
  // 

  tFCEnum::
  tFCEnum (value v)
  : ::xml_schema::name (_xsd_tFCEnum_literals_[v])
  {
  }

  tFCEnum::
  tFCEnum (const char* v)
  : ::xml_schema::name (v)
  {
  }

  tFCEnum::
  tFCEnum (const ::std::string& v)
  : ::xml_schema::name (v)
  {
  }

  tFCEnum::
  tFCEnum (const ::xml_schema::name& v)
  : ::xml_schema::name (v)
  {
  }

  tFCEnum::
  tFCEnum (const tFCEnum& v,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::name (v, f, c)
  {
  }

  tFCEnum& tFCEnum::
  operator= (value v)
  {
    static_cast< ::xml_schema::name& > (*this) = 
    ::xml_schema::name (_xsd_tFCEnum_literals_[v]);

    return *this;
  }


  // tServiceFCEnum
  // 

  tServiceFCEnum::
  tServiceFCEnum (value v)
  : ::xml_schema::name (_xsd_tServiceFCEnum_literals_[v])
  {
  }

  tServiceFCEnum::
  tServiceFCEnum (const char* v)
  : ::xml_schema::name (v)
  {
  }

  tServiceFCEnum::
  tServiceFCEnum (const ::std::string& v)
  : ::xml_schema::name (v)
  {
  }

  tServiceFCEnum::
  tServiceFCEnum (const ::xml_schema::name& v)
  : ::xml_schema::name (v)
  {
  }

  tServiceFCEnum::
  tServiceFCEnum (const tServiceFCEnum& v,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::name (v, f, c)
  {
  }

  tServiceFCEnum& tServiceFCEnum::
  operator= (value v)
  {
    static_cast< ::xml_schema::name& > (*this) = 
    ::xml_schema::name (_xsd_tServiceFCEnum_literals_[v]);

    return *this;
  }


  // tPredefinedBasicTypeEnum
  // 

  tPredefinedBasicTypeEnum::
  tPredefinedBasicTypeEnum (value v)
  : ::xml_schema::name (_xsd_tPredefinedBasicTypeEnum_literals_[v])
  {
  }

  tPredefinedBasicTypeEnum::
  tPredefinedBasicTypeEnum (const char* v)
  : ::xml_schema::name (v)
  {
  }

  tPredefinedBasicTypeEnum::
  tPredefinedBasicTypeEnum (const ::std::string& v)
  : ::xml_schema::name (v)
  {
  }

  tPredefinedBasicTypeEnum::
  tPredefinedBasicTypeEnum (const ::xml_schema::name& v)
  : ::xml_schema::name (v)
  {
  }

  tPredefinedBasicTypeEnum::
  tPredefinedBasicTypeEnum (const tPredefinedBasicTypeEnum& v,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::name (v, f, c)
  {
  }

  tPredefinedBasicTypeEnum& tPredefinedBasicTypeEnum::
  operator= (value v)
  {
    static_cast< ::xml_schema::name& > (*this) = 
    ::xml_schema::name (_xsd_tPredefinedBasicTypeEnum_literals_[v]);

    return *this;
  }


  // tExtensionBasicTypeEnum
  // 


  // tBasicTypeEnum
  //

  tBasicTypeEnum::
  tBasicTypeEnum (const char* s)
  : ::xml_schema::string (s)
  {
  }

  tBasicTypeEnum::
  tBasicTypeEnum (const ::std::string& s)
  : ::xml_schema::string (s)
  {
  }

  tBasicTypeEnum::
  tBasicTypeEnum (const tBasicTypeEnum& o,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::string (o, f, c)
  {
  }

  // tValKindEnum
  // 

  tValKindEnum::
  tValKindEnum (value v)
  : ::xml_schema::name (_xsd_tValKindEnum_literals_[v])
  {
  }

  tValKindEnum::
  tValKindEnum (const char* v)
  : ::xml_schema::name (v)
  {
  }

  tValKindEnum::
  tValKindEnum (const ::std::string& v)
  : ::xml_schema::name (v)
  {
  }

  tValKindEnum::
  tValKindEnum (const ::xml_schema::name& v)
  : ::xml_schema::name (v)
  {
  }

  tValKindEnum::
  tValKindEnum (const tValKindEnum& v,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::name (v, f, c)
  {
  }

  tValKindEnum& tValKindEnum::
  operator= (value v)
  {
    static_cast< ::xml_schema::name& > (*this) = 
    ::xml_schema::name (_xsd_tValKindEnum_literals_[v]);

    return *this;
  }


  // tGSEControlTypeEnum
  // 

  tGSEControlTypeEnum::
  tGSEControlTypeEnum (value v)
  : ::xml_schema::name (_xsd_tGSEControlTypeEnum_literals_[v])
  {
  }

  tGSEControlTypeEnum::
  tGSEControlTypeEnum (const char* v)
  : ::xml_schema::name (v)
  {
  }

  tGSEControlTypeEnum::
  tGSEControlTypeEnum (const ::std::string& v)
  : ::xml_schema::name (v)
  {
  }

  tGSEControlTypeEnum::
  tGSEControlTypeEnum (const ::xml_schema::name& v)
  : ::xml_schema::name (v)
  {
  }

  tGSEControlTypeEnum::
  tGSEControlTypeEnum (const tGSEControlTypeEnum& v,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (v, f, c)
  {
  }

  tGSEControlTypeEnum& tGSEControlTypeEnum::
  operator= (value v)
  {
    static_cast< ::xml_schema::name& > (*this) = 
    ::xml_schema::name (_xsd_tGSEControlTypeEnum_literals_[v]);

    return *this;
  }


  // tSIUnitEnum
  // 

  tSIUnitEnum::
  tSIUnitEnum (value v)
  : ::xml_schema::token (_xsd_tSIUnitEnum_literals_[v])
  {
  }

  tSIUnitEnum::
  tSIUnitEnum (const char* v)
  : ::xml_schema::token (v)
  {
  }

  tSIUnitEnum::
  tSIUnitEnum (const ::std::string& v)
  : ::xml_schema::token (v)
  {
  }

  tSIUnitEnum::
  tSIUnitEnum (const ::xml_schema::token& v)
  : ::xml_schema::token (v)
  {
  }

  tSIUnitEnum::
  tSIUnitEnum (const tSIUnitEnum& v,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::token (v, f, c)
  {
  }

  tSIUnitEnum& tSIUnitEnum::
  operator= (value v)
  {
    static_cast< ::xml_schema::token& > (*this) = 
    ::xml_schema::token (_xsd_tSIUnitEnum_literals_[v]);

    return *this;
  }


  // tUnitMultiplierEnum
  // 

  tUnitMultiplierEnum::
  tUnitMultiplierEnum (value v)
  : ::xml_schema::normalized_string (_xsd_tUnitMultiplierEnum_literals_[v])
  {
  }

  tUnitMultiplierEnum::
  tUnitMultiplierEnum (const char* v)
  : ::xml_schema::normalized_string (v)
  {
  }

  tUnitMultiplierEnum::
  tUnitMultiplierEnum (const ::std::string& v)
  : ::xml_schema::normalized_string (v)
  {
  }

  tUnitMultiplierEnum::
  tUnitMultiplierEnum (const ::xml_schema::normalized_string& v)
  : ::xml_schema::normalized_string (v)
  {
  }

  tUnitMultiplierEnum::
  tUnitMultiplierEnum (const tUnitMultiplierEnum& v,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::normalized_string (v, f, c)
  {
  }

  tUnitMultiplierEnum& tUnitMultiplierEnum::
  operator= (value v)
  {
    static_cast< ::xml_schema::normalized_string& > (*this) = 
    ::xml_schema::normalized_string (_xsd_tUnitMultiplierEnum_literals_[v]);

    return *this;
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace SCL
{
  // tPredefinedPTypeEnum
  //

  tPredefinedPTypeEnum::
  tPredefinedPTypeEnum (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::name (e, f, c)
  {
    _xsd_tPredefinedPTypeEnum_convert ();
  }

  tPredefinedPTypeEnum::
  tPredefinedPTypeEnum (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::name (a, f, c)
  {
    _xsd_tPredefinedPTypeEnum_convert ();
  }

  tPredefinedPTypeEnum::
  tPredefinedPTypeEnum (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::name (s, e, f, c)
  {
    _xsd_tPredefinedPTypeEnum_convert ();
  }

  tPredefinedPTypeEnum* tPredefinedPTypeEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tPredefinedPTypeEnum (*this, f, c);
  }

  tPredefinedPTypeEnum::value tPredefinedPTypeEnum::
  _xsd_tPredefinedPTypeEnum_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tPredefinedPTypeEnum_literals_);
    const value* i (::std::lower_bound (
                      _xsd_tPredefinedPTypeEnum_indexes_,
                      _xsd_tPredefinedPTypeEnum_indexes_ + 15,
                      *this,
                      c));

    if (i == _xsd_tPredefinedPTypeEnum_indexes_ + 15 || _xsd_tPredefinedPTypeEnum_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const tPredefinedPTypeEnum::
  _xsd_tPredefinedPTypeEnum_literals_[15] =
  {
    "IP",
    "IP-SUBNET",
    "IP-GATEWAY",
    "OSI-NSAP",
    "OSI-TSEL",
    "OSI-SSEL",
    "OSI-PSEL",
    "OSI-AP-Title",
    "OSI-AP-Invoke",
    "OSI-AE-Qualifier",
    "OSI-AE-Invoke",
    "MAC-Address",
    "APPID",
    "VLAN-PRIORITY",
    "VLAN-ID"
  };

  const tPredefinedPTypeEnum::value tPredefinedPTypeEnum::
  _xsd_tPredefinedPTypeEnum_indexes_[15] =
  {
    ::SCL::tPredefinedPTypeEnum::APPID,
    ::SCL::tPredefinedPTypeEnum::IP,
    ::SCL::tPredefinedPTypeEnum::IP_GATEWAY,
    ::SCL::tPredefinedPTypeEnum::IP_SUBNET,
    ::SCL::tPredefinedPTypeEnum::MAC_Address,
    ::SCL::tPredefinedPTypeEnum::OSI_AE_Invoke,
    ::SCL::tPredefinedPTypeEnum::OSI_AE_Qualifier,
    ::SCL::tPredefinedPTypeEnum::OSI_AP_Invoke,
    ::SCL::tPredefinedPTypeEnum::OSI_AP_Title,
    ::SCL::tPredefinedPTypeEnum::OSI_NSAP,
    ::SCL::tPredefinedPTypeEnum::OSI_PSEL,
    ::SCL::tPredefinedPTypeEnum::OSI_SSEL,
    ::SCL::tPredefinedPTypeEnum::OSI_TSEL,
    ::SCL::tPredefinedPTypeEnum::VLAN_ID,
    ::SCL::tPredefinedPTypeEnum::VLAN_PRIORITY
  };

  // tExtensionPTypeEnum
  //

  tExtensionPTypeEnum::
  tExtensionPTypeEnum ()
  : ::xml_schema::normalized_string ()
  {
  }

  tExtensionPTypeEnum::
  tExtensionPTypeEnum (const char* _xsd_normalized_string_base)
  : ::xml_schema::normalized_string (_xsd_normalized_string_base)
  {
  }

  tExtensionPTypeEnum::
  tExtensionPTypeEnum (const ::std::string& _xsd_normalized_string_base)
  : ::xml_schema::normalized_string (_xsd_normalized_string_base)
  {
  }

  tExtensionPTypeEnum::
  tExtensionPTypeEnum (const ::xml_schema::normalized_string& _xsd_normalized_string_base)
  : ::xml_schema::normalized_string (_xsd_normalized_string_base)
  {
  }

  tExtensionPTypeEnum::
  tExtensionPTypeEnum (const tExtensionPTypeEnum& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::normalized_string (x, f, c)
  {
  }

  tExtensionPTypeEnum::
  tExtensionPTypeEnum (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::normalized_string (e, f, c)
  {
  }

  tExtensionPTypeEnum::
  tExtensionPTypeEnum (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::normalized_string (a, f, c)
  {
  }

  tExtensionPTypeEnum::
  tExtensionPTypeEnum (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::normalized_string (s, e, f, c)
  {
  }

  tExtensionPTypeEnum* tExtensionPTypeEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tExtensionPTypeEnum (*this, f, c);
  }

  tExtensionPTypeEnum::
  ~tExtensionPTypeEnum ()
  {
  }

  // tPTypeEnum
  //

  tPTypeEnum::
  tPTypeEnum (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
  }

  tPTypeEnum::
  tPTypeEnum (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
  }

  tPTypeEnum::
  tPTypeEnum (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
  }

  tPTypeEnum* tPTypeEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tPTypeEnum (*this, f, c);
  }

  // tPredefinedAttributeNameEnum
  //

  tPredefinedAttributeNameEnum::
  tPredefinedAttributeNameEnum (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::name (e, f, c)
  {
    _xsd_tPredefinedAttributeNameEnum_convert ();
  }

  tPredefinedAttributeNameEnum::
  tPredefinedAttributeNameEnum (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::name (a, f, c)
  {
    _xsd_tPredefinedAttributeNameEnum_convert ();
  }

  tPredefinedAttributeNameEnum::
  tPredefinedAttributeNameEnum (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
  : ::xml_schema::name (s, e, f, c)
  {
    _xsd_tPredefinedAttributeNameEnum_convert ();
  }

  tPredefinedAttributeNameEnum* tPredefinedAttributeNameEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tPredefinedAttributeNameEnum (*this, f, c);
  }

  tPredefinedAttributeNameEnum::value tPredefinedAttributeNameEnum::
  _xsd_tPredefinedAttributeNameEnum_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tPredefinedAttributeNameEnum_literals_);
    const value* i (::std::lower_bound (
                      _xsd_tPredefinedAttributeNameEnum_indexes_,
                      _xsd_tPredefinedAttributeNameEnum_indexes_ + 8,
                      *this,
                      c));

    if (i == _xsd_tPredefinedAttributeNameEnum_indexes_ + 8 || _xsd_tPredefinedAttributeNameEnum_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const tPredefinedAttributeNameEnum::
  _xsd_tPredefinedAttributeNameEnum_literals_[8] =
  {
    "T",
    "Test",
    "Check",
    "SIUnit",
    "Oper",
    "SBO",
    "SBOw",
    "Cancel"
  };

  const tPredefinedAttributeNameEnum::value tPredefinedAttributeNameEnum::
  _xsd_tPredefinedAttributeNameEnum_indexes_[8] =
  {
    ::SCL::tPredefinedAttributeNameEnum::Cancel,
    ::SCL::tPredefinedAttributeNameEnum::Check,
    ::SCL::tPredefinedAttributeNameEnum::Oper,
    ::SCL::tPredefinedAttributeNameEnum::SBO,
    ::SCL::tPredefinedAttributeNameEnum::SBOw,
    ::SCL::tPredefinedAttributeNameEnum::SIUnit,
    ::SCL::tPredefinedAttributeNameEnum::T,
    ::SCL::tPredefinedAttributeNameEnum::Test
  };

  // tExtensionAttributeNameEnum
  //

  tExtensionAttributeNameEnum::
  tExtensionAttributeNameEnum (const char* _xsd_name_base)
  : ::SCL::tRestrName1stL (_xsd_name_base)
  {
  }

  tExtensionAttributeNameEnum::
  tExtensionAttributeNameEnum (const ::std::string& _xsd_name_base)
  : ::SCL::tRestrName1stL (_xsd_name_base)
  {
  }

  tExtensionAttributeNameEnum::
  tExtensionAttributeNameEnum (const ::xml_schema::name& _xsd_name_base)
  : ::SCL::tRestrName1stL (_xsd_name_base)
  {
  }

  tExtensionAttributeNameEnum::
  tExtensionAttributeNameEnum (const tExtensionAttributeNameEnum& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::SCL::tRestrName1stL (x, f, c)
  {
  }

  tExtensionAttributeNameEnum::
  tExtensionAttributeNameEnum (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::SCL::tRestrName1stL (e, f, c)
  {
  }

  tExtensionAttributeNameEnum::
  tExtensionAttributeNameEnum (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::SCL::tRestrName1stL (a, f, c)
  {
  }

  tExtensionAttributeNameEnum::
  tExtensionAttributeNameEnum (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::SCL::tRestrName1stL (s, e, f, c)
  {
  }

  tExtensionAttributeNameEnum* tExtensionAttributeNameEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tExtensionAttributeNameEnum (*this, f, c);
  }

  tExtensionAttributeNameEnum::
  ~tExtensionAttributeNameEnum ()
  {
  }

  // tAttributeNameEnum
  //

  tAttributeNameEnum::
  tAttributeNameEnum (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
  }

  tAttributeNameEnum::
  tAttributeNameEnum (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
  }

  tAttributeNameEnum::
  tAttributeNameEnum (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
  }

  tAttributeNameEnum* tAttributeNameEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tAttributeNameEnum (*this, f, c);
  }

  // tPredefinedCommonConductingEquipmentEnum
  //

  tPredefinedCommonConductingEquipmentEnum::
  tPredefinedCommonConductingEquipmentEnum (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::name (e, f, c)
  {
    _xsd_tPredefinedCommonConductingEquipmentEnum_convert ();
  }

  tPredefinedCommonConductingEquipmentEnum::
  tPredefinedCommonConductingEquipmentEnum (const ::xercesc::DOMAttr& a,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::name (a, f, c)
  {
    _xsd_tPredefinedCommonConductingEquipmentEnum_convert ();
  }

  tPredefinedCommonConductingEquipmentEnum::
  tPredefinedCommonConductingEquipmentEnum (const ::std::string& s,
                                            const ::xercesc::DOMElement* e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
  : ::xml_schema::name (s, e, f, c)
  {
    _xsd_tPredefinedCommonConductingEquipmentEnum_convert ();
  }

  tPredefinedCommonConductingEquipmentEnum* tPredefinedCommonConductingEquipmentEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tPredefinedCommonConductingEquipmentEnum (*this, f, c);
  }

  tPredefinedCommonConductingEquipmentEnum::value tPredefinedCommonConductingEquipmentEnum::
  _xsd_tPredefinedCommonConductingEquipmentEnum_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tPredefinedCommonConductingEquipmentEnum_literals_);
    const value* i (::std::lower_bound (
                      _xsd_tPredefinedCommonConductingEquipmentEnum_indexes_,
                      _xsd_tPredefinedCommonConductingEquipmentEnum_indexes_ + 21,
                      *this,
                      c));

    if (i == _xsd_tPredefinedCommonConductingEquipmentEnum_indexes_ + 21 || _xsd_tPredefinedCommonConductingEquipmentEnum_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const tPredefinedCommonConductingEquipmentEnum::
  _xsd_tPredefinedCommonConductingEquipmentEnum_literals_[21] =
  {
    "CBR",
    "DIS",
    "VTR",
    "CTR",
    "GEN",
    "CAP",
    "REA",
    "CON",
    "MOT",
    "EFN",
    "PSH",
    "BAT",
    "BSH",
    "CAB",
    "GIL",
    "LIN",
    "RRC",
    "SAR",
    "TCF",
    "TCR",
    "IFL"
  };

  const tPredefinedCommonConductingEquipmentEnum::value tPredefinedCommonConductingEquipmentEnum::
  _xsd_tPredefinedCommonConductingEquipmentEnum_indexes_[21] =
  {
    ::SCL::tPredefinedCommonConductingEquipmentEnum::BAT,
    ::SCL::tPredefinedCommonConductingEquipmentEnum::BSH,
    ::SCL::tPredefinedCommonConductingEquipmentEnum::CAB,
    ::SCL::tPredefinedCommonConductingEquipmentEnum::CAP,
    ::SCL::tPredefinedCommonConductingEquipmentEnum::CBR,
    ::SCL::tPredefinedCommonConductingEquipmentEnum::CON,
    ::SCL::tPredefinedCommonConductingEquipmentEnum::CTR,
    ::SCL::tPredefinedCommonConductingEquipmentEnum::DIS,
    ::SCL::tPredefinedCommonConductingEquipmentEnum::EFN,
    ::SCL::tPredefinedCommonConductingEquipmentEnum::GEN,
    ::SCL::tPredefinedCommonConductingEquipmentEnum::GIL,
    ::SCL::tPredefinedCommonConductingEquipmentEnum::IFL,
    ::SCL::tPredefinedCommonConductingEquipmentEnum::LIN,
    ::SCL::tPredefinedCommonConductingEquipmentEnum::MOT,
    ::SCL::tPredefinedCommonConductingEquipmentEnum::PSH,
    ::SCL::tPredefinedCommonConductingEquipmentEnum::REA,
    ::SCL::tPredefinedCommonConductingEquipmentEnum::RRC,
    ::SCL::tPredefinedCommonConductingEquipmentEnum::SAR,
    ::SCL::tPredefinedCommonConductingEquipmentEnum::TCF,
    ::SCL::tPredefinedCommonConductingEquipmentEnum::TCR,
    ::SCL::tPredefinedCommonConductingEquipmentEnum::VTR
  };

  // tExtensionEquipmentEnum
  //

  tExtensionEquipmentEnum::
  tExtensionEquipmentEnum (const char* _xsd_name_base)
  : ::xml_schema::name (_xsd_name_base)
  {
  }

  tExtensionEquipmentEnum::
  tExtensionEquipmentEnum (const ::std::string& _xsd_name_base)
  : ::xml_schema::name (_xsd_name_base)
  {
  }

  tExtensionEquipmentEnum::
  tExtensionEquipmentEnum (const ::xml_schema::name& _xsd_name_base)
  : ::xml_schema::name (_xsd_name_base)
  {
  }

  tExtensionEquipmentEnum::
  tExtensionEquipmentEnum (const tExtensionEquipmentEnum& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::name (x, f, c)
  {
  }

  tExtensionEquipmentEnum::
  tExtensionEquipmentEnum (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::name (e, f, c)
  {
  }

  tExtensionEquipmentEnum::
  tExtensionEquipmentEnum (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::name (a, f, c)
  {
  }

  tExtensionEquipmentEnum::
  tExtensionEquipmentEnum (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::name (s, e, f, c)
  {
  }

  tExtensionEquipmentEnum* tExtensionEquipmentEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tExtensionEquipmentEnum (*this, f, c);
  }

  tExtensionEquipmentEnum::
  ~tExtensionEquipmentEnum ()
  {
  }

  // tCommonConductingEquipmentEnum
  //

  tCommonConductingEquipmentEnum::
  tCommonConductingEquipmentEnum (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
  }

  tCommonConductingEquipmentEnum::
  tCommonConductingEquipmentEnum (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
  }

  tCommonConductingEquipmentEnum::
  tCommonConductingEquipmentEnum (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
  }

  tCommonConductingEquipmentEnum* tCommonConductingEquipmentEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tCommonConductingEquipmentEnum (*this, f, c);
  }

  // tPowerTransformerEnum
  //

  tPowerTransformerEnum::
  tPowerTransformerEnum (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::name (e, f, c)
  {
    _xsd_tPowerTransformerEnum_convert ();
  }

  tPowerTransformerEnum::
  tPowerTransformerEnum (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::name (a, f, c)
  {
    _xsd_tPowerTransformerEnum_convert ();
  }

  tPowerTransformerEnum::
  tPowerTransformerEnum (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::name (s, e, f, c)
  {
    _xsd_tPowerTransformerEnum_convert ();
  }

  tPowerTransformerEnum* tPowerTransformerEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tPowerTransformerEnum (*this, f, c);
  }

  tPowerTransformerEnum::value tPowerTransformerEnum::
  _xsd_tPowerTransformerEnum_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tPowerTransformerEnum_literals_);
    const value* i (::std::lower_bound (
                      _xsd_tPowerTransformerEnum_indexes_,
                      _xsd_tPowerTransformerEnum_indexes_ + 1,
                      *this,
                      c));

    if (i == _xsd_tPowerTransformerEnum_indexes_ + 1 || _xsd_tPowerTransformerEnum_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const tPowerTransformerEnum::
  _xsd_tPowerTransformerEnum_literals_[1] =
  {
    "PTR"
  };

  const tPowerTransformerEnum::value tPowerTransformerEnum::
  _xsd_tPowerTransformerEnum_indexes_[1] =
  {
    ::SCL::tPowerTransformerEnum::PTR
  };

  // tTransformerWindingEnum
  //

  tTransformerWindingEnum::
  tTransformerWindingEnum (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::name (e, f, c)
  {
    _xsd_tTransformerWindingEnum_convert ();
  }

  tTransformerWindingEnum::
  tTransformerWindingEnum (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::name (a, f, c)
  {
    _xsd_tTransformerWindingEnum_convert ();
  }

  tTransformerWindingEnum::
  tTransformerWindingEnum (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::name (s, e, f, c)
  {
    _xsd_tTransformerWindingEnum_convert ();
  }

  tTransformerWindingEnum* tTransformerWindingEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tTransformerWindingEnum (*this, f, c);
  }

  tTransformerWindingEnum::value tTransformerWindingEnum::
  _xsd_tTransformerWindingEnum_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tTransformerWindingEnum_literals_);
    const value* i (::std::lower_bound (
                      _xsd_tTransformerWindingEnum_indexes_,
                      _xsd_tTransformerWindingEnum_indexes_ + 1,
                      *this,
                      c));

    if (i == _xsd_tTransformerWindingEnum_indexes_ + 1 || _xsd_tTransformerWindingEnum_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const tTransformerWindingEnum::
  _xsd_tTransformerWindingEnum_literals_[1] =
  {
    "PTW"
  };

  const tTransformerWindingEnum::value tTransformerWindingEnum::
  _xsd_tTransformerWindingEnum_indexes_[1] =
  {
    ::SCL::tTransformerWindingEnum::PTW
  };

  // tPredefinedEquipmentEnum
  //

  tPredefinedEquipmentEnum::
  tPredefinedEquipmentEnum (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
  }

  tPredefinedEquipmentEnum::
  tPredefinedEquipmentEnum (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
  }

  tPredefinedEquipmentEnum::
  tPredefinedEquipmentEnum (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
  }

  tPredefinedEquipmentEnum* tPredefinedEquipmentEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tPredefinedEquipmentEnum (*this, f, c);
  }

  // tEquipmentEnum
  //

  tEquipmentEnum::
  tEquipmentEnum (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
  }

  tEquipmentEnum::
  tEquipmentEnum (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
  }

  tEquipmentEnum::
  tEquipmentEnum (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
  }

  tEquipmentEnum* tEquipmentEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tEquipmentEnum (*this, f, c);
  }

  // tPredefinedGeneralEquipmentEnum
  //

  tPredefinedGeneralEquipmentEnum::
  tPredefinedGeneralEquipmentEnum (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::name (e, f, c)
  {
    _xsd_tPredefinedGeneralEquipmentEnum_convert ();
  }

  tPredefinedGeneralEquipmentEnum::
  tPredefinedGeneralEquipmentEnum (const ::xercesc::DOMAttr& a,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::name (a, f, c)
  {
    _xsd_tPredefinedGeneralEquipmentEnum_convert ();
  }

  tPredefinedGeneralEquipmentEnum::
  tPredefinedGeneralEquipmentEnum (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::name (s, e, f, c)
  {
    _xsd_tPredefinedGeneralEquipmentEnum_convert ();
  }

  tPredefinedGeneralEquipmentEnum* tPredefinedGeneralEquipmentEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tPredefinedGeneralEquipmentEnum (*this, f, c);
  }

  tPredefinedGeneralEquipmentEnum::value tPredefinedGeneralEquipmentEnum::
  _xsd_tPredefinedGeneralEquipmentEnum_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tPredefinedGeneralEquipmentEnum_literals_);
    const value* i (::std::lower_bound (
                      _xsd_tPredefinedGeneralEquipmentEnum_indexes_,
                      _xsd_tPredefinedGeneralEquipmentEnum_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_tPredefinedGeneralEquipmentEnum_indexes_ + 3 || _xsd_tPredefinedGeneralEquipmentEnum_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const tPredefinedGeneralEquipmentEnum::
  _xsd_tPredefinedGeneralEquipmentEnum_literals_[3] =
  {
    "AXN",
    "BAT",
    "MOT"
  };

  const tPredefinedGeneralEquipmentEnum::value tPredefinedGeneralEquipmentEnum::
  _xsd_tPredefinedGeneralEquipmentEnum_indexes_[3] =
  {
    ::SCL::tPredefinedGeneralEquipmentEnum::AXN,
    ::SCL::tPredefinedGeneralEquipmentEnum::BAT,
    ::SCL::tPredefinedGeneralEquipmentEnum::MOT
  };

  // tExtensionGeneralEquipmentEnum
  //

  tExtensionGeneralEquipmentEnum::
  tExtensionGeneralEquipmentEnum (const char* _xsd_name_base)
  : ::xml_schema::name (_xsd_name_base)
  {
  }

  tExtensionGeneralEquipmentEnum::
  tExtensionGeneralEquipmentEnum (const ::std::string& _xsd_name_base)
  : ::xml_schema::name (_xsd_name_base)
  {
  }

  tExtensionGeneralEquipmentEnum::
  tExtensionGeneralEquipmentEnum (const ::xml_schema::name& _xsd_name_base)
  : ::xml_schema::name (_xsd_name_base)
  {
  }

  tExtensionGeneralEquipmentEnum::
  tExtensionGeneralEquipmentEnum (const tExtensionGeneralEquipmentEnum& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::name (x, f, c)
  {
  }

  tExtensionGeneralEquipmentEnum::
  tExtensionGeneralEquipmentEnum (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::name (e, f, c)
  {
  }

  tExtensionGeneralEquipmentEnum::
  tExtensionGeneralEquipmentEnum (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::name (a, f, c)
  {
  }

  tExtensionGeneralEquipmentEnum::
  tExtensionGeneralEquipmentEnum (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::name (s, e, f, c)
  {
  }

  tExtensionGeneralEquipmentEnum* tExtensionGeneralEquipmentEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tExtensionGeneralEquipmentEnum (*this, f, c);
  }

  tExtensionGeneralEquipmentEnum::
  ~tExtensionGeneralEquipmentEnum ()
  {
  }

  // tGeneralEquipmentEnum
  //

  tGeneralEquipmentEnum::
  tGeneralEquipmentEnum (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
  }

  tGeneralEquipmentEnum::
  tGeneralEquipmentEnum (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
  }

  tGeneralEquipmentEnum::
  tGeneralEquipmentEnum (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
  }

  tGeneralEquipmentEnum* tGeneralEquipmentEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tGeneralEquipmentEnum (*this, f, c);
  }

  // tServiceSettingsEnum
  //

  tServiceSettingsEnum::
  tServiceSettingsEnum (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::name (e, f, c)
  {
    _xsd_tServiceSettingsEnum_convert ();
  }

  tServiceSettingsEnum::
  tServiceSettingsEnum (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::name (a, f, c)
  {
    _xsd_tServiceSettingsEnum_convert ();
  }

  tServiceSettingsEnum::
  tServiceSettingsEnum (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::name (s, e, f, c)
  {
    _xsd_tServiceSettingsEnum_convert ();
  }

  tServiceSettingsEnum* tServiceSettingsEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tServiceSettingsEnum (*this, f, c);
  }

  tServiceSettingsEnum::value tServiceSettingsEnum::
  _xsd_tServiceSettingsEnum_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tServiceSettingsEnum_literals_);
    const value* i (::std::lower_bound (
                      _xsd_tServiceSettingsEnum_indexes_,
                      _xsd_tServiceSettingsEnum_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_tServiceSettingsEnum_indexes_ + 3 || _xsd_tServiceSettingsEnum_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const tServiceSettingsEnum::
  _xsd_tServiceSettingsEnum_literals_[3] =
  {
    "Dyn",
    "Conf",
    "Fix"
  };

  const tServiceSettingsEnum::value tServiceSettingsEnum::
  _xsd_tServiceSettingsEnum_indexes_[3] =
  {
    ::SCL::tServiceSettingsEnum::Conf,
    ::SCL::tServiceSettingsEnum::Dyn,
    ::SCL::tServiceSettingsEnum::Fix
  };

  // tPhaseEnum
  //

  tPhaseEnum::
  tPhaseEnum (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::name (e, f, c)
  {
    _xsd_tPhaseEnum_convert ();
  }

  tPhaseEnum::
  tPhaseEnum (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::name (a, f, c)
  {
    _xsd_tPhaseEnum_convert ();
  }

  tPhaseEnum::
  tPhaseEnum (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::name (s, e, f, c)
  {
    _xsd_tPhaseEnum_convert ();
  }

  tPhaseEnum* tPhaseEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tPhaseEnum (*this, f, c);
  }

  tPhaseEnum::value tPhaseEnum::
  _xsd_tPhaseEnum_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tPhaseEnum_literals_);
    const value* i (::std::lower_bound (
                      _xsd_tPhaseEnum_indexes_,
                      _xsd_tPhaseEnum_indexes_ + 6,
                      *this,
                      c));

    if (i == _xsd_tPhaseEnum_indexes_ + 6 || _xsd_tPhaseEnum_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const tPhaseEnum::
  _xsd_tPhaseEnum_literals_[6] =
  {
    "A",
    "B",
    "C",
    "N",
    "all",
    "none"
  };

  const tPhaseEnum::value tPhaseEnum::
  _xsd_tPhaseEnum_indexes_[6] =
  {
    ::SCL::tPhaseEnum::A,
    ::SCL::tPhaseEnum::B,
    ::SCL::tPhaseEnum::C,
    ::SCL::tPhaseEnum::N,
    ::SCL::tPhaseEnum::all,
    ::SCL::tPhaseEnum::none
  };

  // tAuthenticationEnum
  //

  tAuthenticationEnum::
  tAuthenticationEnum (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (e, f, c)
  {
    _xsd_tAuthenticationEnum_convert ();
  }

  tAuthenticationEnum::
  tAuthenticationEnum (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (a, f, c)
  {
    _xsd_tAuthenticationEnum_convert ();
  }

  tAuthenticationEnum::
  tAuthenticationEnum (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (s, e, f, c)
  {
    _xsd_tAuthenticationEnum_convert ();
  }

  tAuthenticationEnum* tAuthenticationEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tAuthenticationEnum (*this, f, c);
  }

  tAuthenticationEnum::value tAuthenticationEnum::
  _xsd_tAuthenticationEnum_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tAuthenticationEnum_literals_);
    const value* i (::std::lower_bound (
                      _xsd_tAuthenticationEnum_indexes_,
                      _xsd_tAuthenticationEnum_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_tAuthenticationEnum_indexes_ + 5 || _xsd_tAuthenticationEnum_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const tAuthenticationEnum::
  _xsd_tAuthenticationEnum_literals_[5] =
  {
    "none",
    "password",
    "week",
    "strong",
    "certificate"
  };

  const tAuthenticationEnum::value tAuthenticationEnum::
  _xsd_tAuthenticationEnum_indexes_[5] =
  {
    ::SCL::tAuthenticationEnum::certificate,
    ::SCL::tAuthenticationEnum::none,
    ::SCL::tAuthenticationEnum::password,
    ::SCL::tAuthenticationEnum::strong,
    ::SCL::tAuthenticationEnum::week
  };

  // tAssociationKindEnum
  //

  tAssociationKindEnum::
  tAssociationKindEnum (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_tAssociationKindEnum_convert ();
  }

  tAssociationKindEnum::
  tAssociationKindEnum (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_tAssociationKindEnum_convert ();
  }

  tAssociationKindEnum::
  tAssociationKindEnum (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_tAssociationKindEnum_convert ();
  }

  tAssociationKindEnum* tAssociationKindEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tAssociationKindEnum (*this, f, c);
  }

  tAssociationKindEnum::value tAssociationKindEnum::
  _xsd_tAssociationKindEnum_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tAssociationKindEnum_literals_);
    const value* i (::std::lower_bound (
                      _xsd_tAssociationKindEnum_indexes_,
                      _xsd_tAssociationKindEnum_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_tAssociationKindEnum_indexes_ + 2 || _xsd_tAssociationKindEnum_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const tAssociationKindEnum::
  _xsd_tAssociationKindEnum_literals_[2] =
  {
    "pre-established",
    "predefined"
  };

  const tAssociationKindEnum::value tAssociationKindEnum::
  _xsd_tAssociationKindEnum_indexes_[2] =
  {
    ::SCL::tAssociationKindEnum::pre_established,
    ::SCL::tAssociationKindEnum::predefined
  };

  // tLPHDEnum
  //

  tLPHDEnum::
  tLPHDEnum (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::name (e, f, c)
  {
    _xsd_tLPHDEnum_convert ();
  }

  tLPHDEnum::
  tLPHDEnum (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::name (a, f, c)
  {
    _xsd_tLPHDEnum_convert ();
  }

  tLPHDEnum::
  tLPHDEnum (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::name (s, e, f, c)
  {
    _xsd_tLPHDEnum_convert ();
  }

  tLPHDEnum* tLPHDEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tLPHDEnum (*this, f, c);
  }

  tLPHDEnum::value tLPHDEnum::
  _xsd_tLPHDEnum_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tLPHDEnum_literals_);
    const value* i (::std::lower_bound (
                      _xsd_tLPHDEnum_indexes_,
                      _xsd_tLPHDEnum_indexes_ + 1,
                      *this,
                      c));

    if (i == _xsd_tLPHDEnum_indexes_ + 1 || _xsd_tLPHDEnum_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const tLPHDEnum::
  _xsd_tLPHDEnum_literals_[1] =
  {
    "LPHD"
  };

  const tLPHDEnum::value tLPHDEnum::
  _xsd_tLPHDEnum_indexes_[1] =
  {
    ::SCL::tLPHDEnum::LPHD
  };

  // tLLN0Enum
  //

  tLLN0Enum::
  tLLN0Enum (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::name (e, f, c)
  {
    _xsd_tLLN0Enum_convert ();
  }

  tLLN0Enum::
  tLLN0Enum (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::name (a, f, c)
  {
    _xsd_tLLN0Enum_convert ();
  }

  tLLN0Enum::
  tLLN0Enum (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::name (s, e, f, c)
  {
    _xsd_tLLN0Enum_convert ();
  }

  tLLN0Enum* tLLN0Enum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tLLN0Enum (*this, f, c);
  }

  tLLN0Enum::value tLLN0Enum::
  _xsd_tLLN0Enum_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tLLN0Enum_literals_);
    const value* i (::std::lower_bound (
                      _xsd_tLLN0Enum_indexes_,
                      _xsd_tLLN0Enum_indexes_ + 1,
                      *this,
                      c));

    if (i == _xsd_tLLN0Enum_indexes_ + 1 || _xsd_tLLN0Enum_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const tLLN0Enum::
  _xsd_tLLN0Enum_literals_[1] =
  {
    "LLN0"
  };

  const tLLN0Enum::value tLLN0Enum::
  _xsd_tLLN0Enum_indexes_[1] =
  {
    ::SCL::tLLN0Enum::LLN0
  };

  // tDomainLNGroupAEnum
  //

  tDomainLNGroupAEnum::
  tDomainLNGroupAEnum (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (e, f, c)
  {
    _xsd_tDomainLNGroupAEnum_convert ();
  }

  tDomainLNGroupAEnum::
  tDomainLNGroupAEnum (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (a, f, c)
  {
    _xsd_tDomainLNGroupAEnum_convert ();
  }

  tDomainLNGroupAEnum::
  tDomainLNGroupAEnum (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (s, e, f, c)
  {
    _xsd_tDomainLNGroupAEnum_convert ();
  }

  tDomainLNGroupAEnum* tDomainLNGroupAEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tDomainLNGroupAEnum (*this, f, c);
  }

  tDomainLNGroupAEnum::value tDomainLNGroupAEnum::
  _xsd_tDomainLNGroupAEnum_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tDomainLNGroupAEnum_literals_);
    const value* i (::std::lower_bound (
                      _xsd_tDomainLNGroupAEnum_indexes_,
                      _xsd_tDomainLNGroupAEnum_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_tDomainLNGroupAEnum_indexes_ + 4 || _xsd_tDomainLNGroupAEnum_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const tDomainLNGroupAEnum::
  _xsd_tDomainLNGroupAEnum_literals_[4] =
  {
    "ANCR",
    "ARCO",
    "ATCC",
    "AVCO"
  };

  const tDomainLNGroupAEnum::value tDomainLNGroupAEnum::
  _xsd_tDomainLNGroupAEnum_indexes_[4] =
  {
    ::SCL::tDomainLNGroupAEnum::ANCR,
    ::SCL::tDomainLNGroupAEnum::ARCO,
    ::SCL::tDomainLNGroupAEnum::ATCC,
    ::SCL::tDomainLNGroupAEnum::AVCO
  };

  // tDomainLNGroupCEnum
  //

  tDomainLNGroupCEnum::
  tDomainLNGroupCEnum (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (e, f, c)
  {
    _xsd_tDomainLNGroupCEnum_convert ();
  }

  tDomainLNGroupCEnum::
  tDomainLNGroupCEnum (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (a, f, c)
  {
    _xsd_tDomainLNGroupCEnum_convert ();
  }

  tDomainLNGroupCEnum::
  tDomainLNGroupCEnum (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (s, e, f, c)
  {
    _xsd_tDomainLNGroupCEnum_convert ();
  }

  tDomainLNGroupCEnum* tDomainLNGroupCEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tDomainLNGroupCEnum (*this, f, c);
  }

  tDomainLNGroupCEnum::value tDomainLNGroupCEnum::
  _xsd_tDomainLNGroupCEnum_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tDomainLNGroupCEnum_literals_);
    const value* i (::std::lower_bound (
                      _xsd_tDomainLNGroupCEnum_indexes_,
                      _xsd_tDomainLNGroupCEnum_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_tDomainLNGroupCEnum_indexes_ + 5 || _xsd_tDomainLNGroupCEnum_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const tDomainLNGroupCEnum::
  _xsd_tDomainLNGroupCEnum_literals_[5] =
  {
    "CILO",
    "CSWI",
    "CALH",
    "CCGR",
    "CPOW"
  };

  const tDomainLNGroupCEnum::value tDomainLNGroupCEnum::
  _xsd_tDomainLNGroupCEnum_indexes_[5] =
  {
    ::SCL::tDomainLNGroupCEnum::CALH,
    ::SCL::tDomainLNGroupCEnum::CCGR,
    ::SCL::tDomainLNGroupCEnum::CILO,
    ::SCL::tDomainLNGroupCEnum::CPOW,
    ::SCL::tDomainLNGroupCEnum::CSWI
  };

  // tDomainLNGroupGEnum
  //

  tDomainLNGroupGEnum::
  tDomainLNGroupGEnum (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (e, f, c)
  {
    _xsd_tDomainLNGroupGEnum_convert ();
  }

  tDomainLNGroupGEnum::
  tDomainLNGroupGEnum (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (a, f, c)
  {
    _xsd_tDomainLNGroupGEnum_convert ();
  }

  tDomainLNGroupGEnum::
  tDomainLNGroupGEnum (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (s, e, f, c)
  {
    _xsd_tDomainLNGroupGEnum_convert ();
  }

  tDomainLNGroupGEnum* tDomainLNGroupGEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tDomainLNGroupGEnum (*this, f, c);
  }

  tDomainLNGroupGEnum::value tDomainLNGroupGEnum::
  _xsd_tDomainLNGroupGEnum_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tDomainLNGroupGEnum_literals_);
    const value* i (::std::lower_bound (
                      _xsd_tDomainLNGroupGEnum_indexes_,
                      _xsd_tDomainLNGroupGEnum_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_tDomainLNGroupGEnum_indexes_ + 3 || _xsd_tDomainLNGroupGEnum_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const tDomainLNGroupGEnum::
  _xsd_tDomainLNGroupGEnum_literals_[3] =
  {
    "GAPC",
    "GGIO",
    "GSAL"
  };

  const tDomainLNGroupGEnum::value tDomainLNGroupGEnum::
  _xsd_tDomainLNGroupGEnum_indexes_[3] =
  {
    ::SCL::tDomainLNGroupGEnum::GAPC,
    ::SCL::tDomainLNGroupGEnum::GGIO,
    ::SCL::tDomainLNGroupGEnum::GSAL
  };

  // tDomainLNGroupIEnum
  //

  tDomainLNGroupIEnum::
  tDomainLNGroupIEnum (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (e, f, c)
  {
    _xsd_tDomainLNGroupIEnum_convert ();
  }

  tDomainLNGroupIEnum::
  tDomainLNGroupIEnum (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (a, f, c)
  {
    _xsd_tDomainLNGroupIEnum_convert ();
  }

  tDomainLNGroupIEnum::
  tDomainLNGroupIEnum (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (s, e, f, c)
  {
    _xsd_tDomainLNGroupIEnum_convert ();
  }

  tDomainLNGroupIEnum* tDomainLNGroupIEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tDomainLNGroupIEnum (*this, f, c);
  }

  tDomainLNGroupIEnum::value tDomainLNGroupIEnum::
  _xsd_tDomainLNGroupIEnum_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tDomainLNGroupIEnum_literals_);
    const value* i (::std::lower_bound (
                      _xsd_tDomainLNGroupIEnum_indexes_,
                      _xsd_tDomainLNGroupIEnum_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_tDomainLNGroupIEnum_indexes_ + 4 || _xsd_tDomainLNGroupIEnum_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const tDomainLNGroupIEnum::
  _xsd_tDomainLNGroupIEnum_literals_[4] =
  {
    "IHMI",
    "IARC",
    "ITCI",
    "ITMI"
  };

  const tDomainLNGroupIEnum::value tDomainLNGroupIEnum::
  _xsd_tDomainLNGroupIEnum_indexes_[4] =
  {
    ::SCL::tDomainLNGroupIEnum::IARC,
    ::SCL::tDomainLNGroupIEnum::IHMI,
    ::SCL::tDomainLNGroupIEnum::ITCI,
    ::SCL::tDomainLNGroupIEnum::ITMI
  };

  // tDomainLNGroupMEnum
  //

  tDomainLNGroupMEnum::
  tDomainLNGroupMEnum (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (e, f, c)
  {
    _xsd_tDomainLNGroupMEnum_convert ();
  }

  tDomainLNGroupMEnum::
  tDomainLNGroupMEnum (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (a, f, c)
  {
    _xsd_tDomainLNGroupMEnum_convert ();
  }

  tDomainLNGroupMEnum::
  tDomainLNGroupMEnum (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (s, e, f, c)
  {
    _xsd_tDomainLNGroupMEnum_convert ();
  }

  tDomainLNGroupMEnum* tDomainLNGroupMEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tDomainLNGroupMEnum (*this, f, c);
  }

  tDomainLNGroupMEnum::value tDomainLNGroupMEnum::
  _xsd_tDomainLNGroupMEnum_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tDomainLNGroupMEnum_literals_);
    const value* i (::std::lower_bound (
                      _xsd_tDomainLNGroupMEnum_indexes_,
                      _xsd_tDomainLNGroupMEnum_indexes_ + 8,
                      *this,
                      c));

    if (i == _xsd_tDomainLNGroupMEnum_indexes_ + 8 || _xsd_tDomainLNGroupMEnum_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const tDomainLNGroupMEnum::
  _xsd_tDomainLNGroupMEnum_literals_[8] =
  {
    "MMXU",
    "MDIF",
    "MHAI",
    "MHAN",
    "MMTR",
    "MMXN",
    "MSQI",
    "MSTA"
  };

  const tDomainLNGroupMEnum::value tDomainLNGroupMEnum::
  _xsd_tDomainLNGroupMEnum_indexes_[8] =
  {
    ::SCL::tDomainLNGroupMEnum::MDIF,
    ::SCL::tDomainLNGroupMEnum::MHAI,
    ::SCL::tDomainLNGroupMEnum::MHAN,
    ::SCL::tDomainLNGroupMEnum::MMTR,
    ::SCL::tDomainLNGroupMEnum::MMXN,
    ::SCL::tDomainLNGroupMEnum::MMXU,
    ::SCL::tDomainLNGroupMEnum::MSQI,
    ::SCL::tDomainLNGroupMEnum::MSTA
  };

  // tDomainLNGroupPEnum
  //

  tDomainLNGroupPEnum::
  tDomainLNGroupPEnum (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (e, f, c)
  {
    _xsd_tDomainLNGroupPEnum_convert ();
  }

  tDomainLNGroupPEnum::
  tDomainLNGroupPEnum (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (a, f, c)
  {
    _xsd_tDomainLNGroupPEnum_convert ();
  }

  tDomainLNGroupPEnum::
  tDomainLNGroupPEnum (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (s, e, f, c)
  {
    _xsd_tDomainLNGroupPEnum_convert ();
  }

  tDomainLNGroupPEnum* tDomainLNGroupPEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tDomainLNGroupPEnum (*this, f, c);
  }

  tDomainLNGroupPEnum::value tDomainLNGroupPEnum::
  _xsd_tDomainLNGroupPEnum_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tDomainLNGroupPEnum_literals_);
    const value* i (::std::lower_bound (
                      _xsd_tDomainLNGroupPEnum_indexes_,
                      _xsd_tDomainLNGroupPEnum_indexes_ + 28,
                      *this,
                      c));

    if (i == _xsd_tDomainLNGroupPEnum_indexes_ + 28 || _xsd_tDomainLNGroupPEnum_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const tDomainLNGroupPEnum::
  _xsd_tDomainLNGroupPEnum_literals_[28] =
  {
    "PDIF",
    "PDIS",
    "PDIR",
    "PDOP",
    "PDUP",
    "PFRC",
    "PHAR",
    "PHIZ",
    "PIOC",
    "PMRI",
    "PMSS",
    "POPF",
    "PPAM",
    "PSCH",
    "PSDE",
    "PTEF",
    "PTOC",
    "PTOF",
    "PTOV",
    "PTRC",
    "PTTR",
    "PTUC",
    "PTUV",
    "PUPF",
    "PTUF",
    "PVOC",
    "PVPH",
    "PZSU"
  };

  const tDomainLNGroupPEnum::value tDomainLNGroupPEnum::
  _xsd_tDomainLNGroupPEnum_indexes_[28] =
  {
    ::SCL::tDomainLNGroupPEnum::PDIF,
    ::SCL::tDomainLNGroupPEnum::PDIR,
    ::SCL::tDomainLNGroupPEnum::PDIS,
    ::SCL::tDomainLNGroupPEnum::PDOP,
    ::SCL::tDomainLNGroupPEnum::PDUP,
    ::SCL::tDomainLNGroupPEnum::PFRC,
    ::SCL::tDomainLNGroupPEnum::PHAR,
    ::SCL::tDomainLNGroupPEnum::PHIZ,
    ::SCL::tDomainLNGroupPEnum::PIOC,
    ::SCL::tDomainLNGroupPEnum::PMRI,
    ::SCL::tDomainLNGroupPEnum::PMSS,
    ::SCL::tDomainLNGroupPEnum::POPF,
    ::SCL::tDomainLNGroupPEnum::PPAM,
    ::SCL::tDomainLNGroupPEnum::PSCH,
    ::SCL::tDomainLNGroupPEnum::PSDE,
    ::SCL::tDomainLNGroupPEnum::PTEF,
    ::SCL::tDomainLNGroupPEnum::PTOC,
    ::SCL::tDomainLNGroupPEnum::PTOF,
    ::SCL::tDomainLNGroupPEnum::PTOV,
    ::SCL::tDomainLNGroupPEnum::PTRC,
    ::SCL::tDomainLNGroupPEnum::PTTR,
    ::SCL::tDomainLNGroupPEnum::PTUC,
    ::SCL::tDomainLNGroupPEnum::PTUF,
    ::SCL::tDomainLNGroupPEnum::PTUV,
    ::SCL::tDomainLNGroupPEnum::PUPF,
    ::SCL::tDomainLNGroupPEnum::PVOC,
    ::SCL::tDomainLNGroupPEnum::PVPH,
    ::SCL::tDomainLNGroupPEnum::PZSU
  };

  // tDomainLNGroupREnum
  //

  tDomainLNGroupREnum::
  tDomainLNGroupREnum (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (e, f, c)
  {
    _xsd_tDomainLNGroupREnum_convert ();
  }

  tDomainLNGroupREnum::
  tDomainLNGroupREnum (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (a, f, c)
  {
    _xsd_tDomainLNGroupREnum_convert ();
  }

  tDomainLNGroupREnum::
  tDomainLNGroupREnum (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (s, e, f, c)
  {
    _xsd_tDomainLNGroupREnum_convert ();
  }

  tDomainLNGroupREnum* tDomainLNGroupREnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tDomainLNGroupREnum (*this, f, c);
  }

  tDomainLNGroupREnum::value tDomainLNGroupREnum::
  _xsd_tDomainLNGroupREnum_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tDomainLNGroupREnum_literals_);
    const value* i (::std::lower_bound (
                      _xsd_tDomainLNGroupREnum_indexes_,
                      _xsd_tDomainLNGroupREnum_indexes_ + 10,
                      *this,
                      c));

    if (i == _xsd_tDomainLNGroupREnum_indexes_ + 10 || _xsd_tDomainLNGroupREnum_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const tDomainLNGroupREnum::
  _xsd_tDomainLNGroupREnum_literals_[10] =
  {
    "RSYN",
    "RDRE",
    "RADR",
    "RBDR",
    "RDRS",
    "RBRF",
    "RDIR",
    "RFLO",
    "RPSB",
    "RREC"
  };

  const tDomainLNGroupREnum::value tDomainLNGroupREnum::
  _xsd_tDomainLNGroupREnum_indexes_[10] =
  {
    ::SCL::tDomainLNGroupREnum::RADR,
    ::SCL::tDomainLNGroupREnum::RBDR,
    ::SCL::tDomainLNGroupREnum::RBRF,
    ::SCL::tDomainLNGroupREnum::RDIR,
    ::SCL::tDomainLNGroupREnum::RDRE,
    ::SCL::tDomainLNGroupREnum::RDRS,
    ::SCL::tDomainLNGroupREnum::RFLO,
    ::SCL::tDomainLNGroupREnum::RPSB,
    ::SCL::tDomainLNGroupREnum::RREC,
    ::SCL::tDomainLNGroupREnum::RSYN
  };

  // tDomainLNGroupSEnum
  //

  tDomainLNGroupSEnum::
  tDomainLNGroupSEnum (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (e, f, c)
  {
    _xsd_tDomainLNGroupSEnum_convert ();
  }

  tDomainLNGroupSEnum::
  tDomainLNGroupSEnum (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (a, f, c)
  {
    _xsd_tDomainLNGroupSEnum_convert ();
  }

  tDomainLNGroupSEnum::
  tDomainLNGroupSEnum (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (s, e, f, c)
  {
    _xsd_tDomainLNGroupSEnum_convert ();
  }

  tDomainLNGroupSEnum* tDomainLNGroupSEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tDomainLNGroupSEnum (*this, f, c);
  }

  tDomainLNGroupSEnum::value tDomainLNGroupSEnum::
  _xsd_tDomainLNGroupSEnum_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tDomainLNGroupSEnum_literals_);
    const value* i (::std::lower_bound (
                      _xsd_tDomainLNGroupSEnum_indexes_,
                      _xsd_tDomainLNGroupSEnum_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_tDomainLNGroupSEnum_indexes_ + 4 || _xsd_tDomainLNGroupSEnum_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const tDomainLNGroupSEnum::
  _xsd_tDomainLNGroupSEnum_literals_[4] =
  {
    "SARC",
    "SIMG",
    "SIML",
    "SPDC"
  };

  const tDomainLNGroupSEnum::value tDomainLNGroupSEnum::
  _xsd_tDomainLNGroupSEnum_indexes_[4] =
  {
    ::SCL::tDomainLNGroupSEnum::SARC,
    ::SCL::tDomainLNGroupSEnum::SIMG,
    ::SCL::tDomainLNGroupSEnum::SIML,
    ::SCL::tDomainLNGroupSEnum::SPDC
  };

  // tDomainLNGroupTEnum
  //

  tDomainLNGroupTEnum::
  tDomainLNGroupTEnum (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (e, f, c)
  {
    _xsd_tDomainLNGroupTEnum_convert ();
  }

  tDomainLNGroupTEnum::
  tDomainLNGroupTEnum (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (a, f, c)
  {
    _xsd_tDomainLNGroupTEnum_convert ();
  }

  tDomainLNGroupTEnum::
  tDomainLNGroupTEnum (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (s, e, f, c)
  {
    _xsd_tDomainLNGroupTEnum_convert ();
  }

  tDomainLNGroupTEnum* tDomainLNGroupTEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tDomainLNGroupTEnum (*this, f, c);
  }

  tDomainLNGroupTEnum::value tDomainLNGroupTEnum::
  _xsd_tDomainLNGroupTEnum_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tDomainLNGroupTEnum_literals_);
    const value* i (::std::lower_bound (
                      _xsd_tDomainLNGroupTEnum_indexes_,
                      _xsd_tDomainLNGroupTEnum_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_tDomainLNGroupTEnum_indexes_ + 2 || _xsd_tDomainLNGroupTEnum_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const tDomainLNGroupTEnum::
  _xsd_tDomainLNGroupTEnum_literals_[2] =
  {
    "TCTR",
    "TVTR"
  };

  const tDomainLNGroupTEnum::value tDomainLNGroupTEnum::
  _xsd_tDomainLNGroupTEnum_indexes_[2] =
  {
    ::SCL::tDomainLNGroupTEnum::TCTR,
    ::SCL::tDomainLNGroupTEnum::TVTR
  };

  // tDomainLNGroupXEnum
  //

  tDomainLNGroupXEnum::
  tDomainLNGroupXEnum (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (e, f, c)
  {
    _xsd_tDomainLNGroupXEnum_convert ();
  }

  tDomainLNGroupXEnum::
  tDomainLNGroupXEnum (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (a, f, c)
  {
    _xsd_tDomainLNGroupXEnum_convert ();
  }

  tDomainLNGroupXEnum::
  tDomainLNGroupXEnum (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (s, e, f, c)
  {
    _xsd_tDomainLNGroupXEnum_convert ();
  }

  tDomainLNGroupXEnum* tDomainLNGroupXEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tDomainLNGroupXEnum (*this, f, c);
  }

  tDomainLNGroupXEnum::value tDomainLNGroupXEnum::
  _xsd_tDomainLNGroupXEnum_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tDomainLNGroupXEnum_literals_);
    const value* i (::std::lower_bound (
                      _xsd_tDomainLNGroupXEnum_indexes_,
                      _xsd_tDomainLNGroupXEnum_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_tDomainLNGroupXEnum_indexes_ + 2 || _xsd_tDomainLNGroupXEnum_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const tDomainLNGroupXEnum::
  _xsd_tDomainLNGroupXEnum_literals_[2] =
  {
    "XCBR",
    "XSWI"
  };

  const tDomainLNGroupXEnum::value tDomainLNGroupXEnum::
  _xsd_tDomainLNGroupXEnum_indexes_[2] =
  {
    ::SCL::tDomainLNGroupXEnum::XCBR,
    ::SCL::tDomainLNGroupXEnum::XSWI
  };

  // tDomainLNGroupYEnum
  //

  tDomainLNGroupYEnum::
  tDomainLNGroupYEnum (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (e, f, c)
  {
    _xsd_tDomainLNGroupYEnum_convert ();
  }

  tDomainLNGroupYEnum::
  tDomainLNGroupYEnum (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (a, f, c)
  {
    _xsd_tDomainLNGroupYEnum_convert ();
  }

  tDomainLNGroupYEnum::
  tDomainLNGroupYEnum (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (s, e, f, c)
  {
    _xsd_tDomainLNGroupYEnum_convert ();
  }

  tDomainLNGroupYEnum* tDomainLNGroupYEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tDomainLNGroupYEnum (*this, f, c);
  }

  tDomainLNGroupYEnum::value tDomainLNGroupYEnum::
  _xsd_tDomainLNGroupYEnum_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tDomainLNGroupYEnum_literals_);
    const value* i (::std::lower_bound (
                      _xsd_tDomainLNGroupYEnum_indexes_,
                      _xsd_tDomainLNGroupYEnum_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_tDomainLNGroupYEnum_indexes_ + 4 || _xsd_tDomainLNGroupYEnum_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const tDomainLNGroupYEnum::
  _xsd_tDomainLNGroupYEnum_literals_[4] =
  {
    "YPTR",
    "YEFN",
    "YLTC",
    "YPSH"
  };

  const tDomainLNGroupYEnum::value tDomainLNGroupYEnum::
  _xsd_tDomainLNGroupYEnum_indexes_[4] =
  {
    ::SCL::tDomainLNGroupYEnum::YEFN,
    ::SCL::tDomainLNGroupYEnum::YLTC,
    ::SCL::tDomainLNGroupYEnum::YPSH,
    ::SCL::tDomainLNGroupYEnum::YPTR
  };

  // tDomainLNGroupZEnum
  //

  tDomainLNGroupZEnum::
  tDomainLNGroupZEnum (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (e, f, c)
  {
    _xsd_tDomainLNGroupZEnum_convert ();
  }

  tDomainLNGroupZEnum::
  tDomainLNGroupZEnum (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (a, f, c)
  {
    _xsd_tDomainLNGroupZEnum_convert ();
  }

  tDomainLNGroupZEnum::
  tDomainLNGroupZEnum (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (s, e, f, c)
  {
    _xsd_tDomainLNGroupZEnum_convert ();
  }

  tDomainLNGroupZEnum* tDomainLNGroupZEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tDomainLNGroupZEnum (*this, f, c);
  }

  tDomainLNGroupZEnum::value tDomainLNGroupZEnum::
  _xsd_tDomainLNGroupZEnum_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tDomainLNGroupZEnum_literals_);
    const value* i (::std::lower_bound (
                      _xsd_tDomainLNGroupZEnum_indexes_,
                      _xsd_tDomainLNGroupZEnum_indexes_ + 15,
                      *this,
                      c));

    if (i == _xsd_tDomainLNGroupZEnum_indexes_ + 15 || _xsd_tDomainLNGroupZEnum_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const tDomainLNGroupZEnum::
  _xsd_tDomainLNGroupZEnum_literals_[15] =
  {
    "ZAXN",
    "ZBAT",
    "ZBSH",
    "ZCAB",
    "ZCAP",
    "ZCON",
    "ZGEN",
    "ZGIL",
    "ZLIN",
    "ZMOT",
    "ZREA",
    "ZRRC",
    "ZSAR",
    "ZTCF",
    "ZTCR"
  };

  const tDomainLNGroupZEnum::value tDomainLNGroupZEnum::
  _xsd_tDomainLNGroupZEnum_indexes_[15] =
  {
    ::SCL::tDomainLNGroupZEnum::ZAXN,
    ::SCL::tDomainLNGroupZEnum::ZBAT,
    ::SCL::tDomainLNGroupZEnum::ZBSH,
    ::SCL::tDomainLNGroupZEnum::ZCAB,
    ::SCL::tDomainLNGroupZEnum::ZCAP,
    ::SCL::tDomainLNGroupZEnum::ZCON,
    ::SCL::tDomainLNGroupZEnum::ZGEN,
    ::SCL::tDomainLNGroupZEnum::ZGIL,
    ::SCL::tDomainLNGroupZEnum::ZLIN,
    ::SCL::tDomainLNGroupZEnum::ZMOT,
    ::SCL::tDomainLNGroupZEnum::ZREA,
    ::SCL::tDomainLNGroupZEnum::ZRRC,
    ::SCL::tDomainLNGroupZEnum::ZSAR,
    ::SCL::tDomainLNGroupZEnum::ZTCF,
    ::SCL::tDomainLNGroupZEnum::ZTCR
  };

  // tDomainLNEnum
  //

  tDomainLNEnum::
  tDomainLNEnum (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::name (e, f, c)
  {
    _xsd_tDomainLNEnum_convert ();
  }

  tDomainLNEnum::
  tDomainLNEnum (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::name (a, f, c)
  {
    _xsd_tDomainLNEnum_convert ();
  }

  tDomainLNEnum::
  tDomainLNEnum (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::name (s, e, f, c)
  {
    _xsd_tDomainLNEnum_convert ();
  }

  tDomainLNEnum* tDomainLNEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tDomainLNEnum (*this, f, c);
  }

  tDomainLNEnum::value tDomainLNEnum::
  _xsd_tDomainLNEnum_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tDomainLNEnum_literals_);
    const value* i (::std::lower_bound (
                      _xsd_tDomainLNEnum_indexes_,
                      _xsd_tDomainLNEnum_indexes_ + 89,
                      *this,
                      c));

    if (i == _xsd_tDomainLNEnum_indexes_ + 89 || _xsd_tDomainLNEnum_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const tDomainLNEnum::
  _xsd_tDomainLNEnum_literals_[89] =
  {
    "ANCR",
    "ARCO",
    "ATCC",
    "AVCO",
    "CILO",
    "CSWI",
    "CALH",
    "CCGR",
    "CPOW",
    "GAPC",
    "GGIO",
    "GSAL",
    "IHMI",
    "IARC",
    "ITCI",
    "ITMI",
    "MMXU",
    "MDIF",
    "MHAI",
    "MHAN",
    "MMTR",
    "MMXN",
    "MSQI",
    "MSTA",
    "PDIF",
    "PDIS",
    "PDIR",
    "PDOP",
    "PDUP",
    "PFRC",
    "PHAR",
    "PHIZ",
    "PIOC",
    "PMRI",
    "PMSS",
    "POPF",
    "PPAM",
    "PSCH",
    "PSDE",
    "PTEF",
    "PTOC",
    "PTOF",
    "PTOV",
    "PTRC",
    "PTTR",
    "PTUC",
    "PTUV",
    "PUPF",
    "PTUF",
    "PVOC",
    "PVPH",
    "PZSU",
    "RSYN",
    "RDRE",
    "RADR",
    "RBDR",
    "RDRS",
    "RBRF",
    "RDIR",
    "RFLO",
    "RPSB",
    "RREC",
    "SARC",
    "SIMG",
    "SIML",
    "SPDC",
    "TCTR",
    "TVTR",
    "XCBR",
    "XSWI",
    "YPTR",
    "YEFN",
    "YLTC",
    "YPSH",
    "ZAXN",
    "ZBAT",
    "ZBSH",
    "ZCAB",
    "ZCAP",
    "ZCON",
    "ZGEN",
    "ZGIL",
    "ZLIN",
    "ZMOT",
    "ZREA",
    "ZRRC",
    "ZSAR",
    "ZTCF",
    "ZTCR"
  };

  const tDomainLNEnum::value tDomainLNEnum::
  _xsd_tDomainLNEnum_indexes_[89] =
  {
    ::SCL::tDomainLNEnum::ANCR,
    ::SCL::tDomainLNEnum::ARCO,
    ::SCL::tDomainLNEnum::ATCC,
    ::SCL::tDomainLNEnum::AVCO,
    ::SCL::tDomainLNEnum::CALH,
    ::SCL::tDomainLNEnum::CCGR,
    ::SCL::tDomainLNEnum::CILO,
    ::SCL::tDomainLNEnum::CPOW,
    ::SCL::tDomainLNEnum::CSWI,
    ::SCL::tDomainLNEnum::GAPC,
    ::SCL::tDomainLNEnum::GGIO,
    ::SCL::tDomainLNEnum::GSAL,
    ::SCL::tDomainLNEnum::IARC,
    ::SCL::tDomainLNEnum::IHMI,
    ::SCL::tDomainLNEnum::ITCI,
    ::SCL::tDomainLNEnum::ITMI,
    ::SCL::tDomainLNEnum::MDIF,
    ::SCL::tDomainLNEnum::MHAI,
    ::SCL::tDomainLNEnum::MHAN,
    ::SCL::tDomainLNEnum::MMTR,
    ::SCL::tDomainLNEnum::MMXN,
    ::SCL::tDomainLNEnum::MMXU,
    ::SCL::tDomainLNEnum::MSQI,
    ::SCL::tDomainLNEnum::MSTA,
    ::SCL::tDomainLNEnum::PDIF,
    ::SCL::tDomainLNEnum::PDIR,
    ::SCL::tDomainLNEnum::PDIS,
    ::SCL::tDomainLNEnum::PDOP,
    ::SCL::tDomainLNEnum::PDUP,
    ::SCL::tDomainLNEnum::PFRC,
    ::SCL::tDomainLNEnum::PHAR,
    ::SCL::tDomainLNEnum::PHIZ,
    ::SCL::tDomainLNEnum::PIOC,
    ::SCL::tDomainLNEnum::PMRI,
    ::SCL::tDomainLNEnum::PMSS,
    ::SCL::tDomainLNEnum::POPF,
    ::SCL::tDomainLNEnum::PPAM,
    ::SCL::tDomainLNEnum::PSCH,
    ::SCL::tDomainLNEnum::PSDE,
    ::SCL::tDomainLNEnum::PTEF,
    ::SCL::tDomainLNEnum::PTOC,
    ::SCL::tDomainLNEnum::PTOF,
    ::SCL::tDomainLNEnum::PTOV,
    ::SCL::tDomainLNEnum::PTRC,
    ::SCL::tDomainLNEnum::PTTR,
    ::SCL::tDomainLNEnum::PTUC,
    ::SCL::tDomainLNEnum::PTUF,
    ::SCL::tDomainLNEnum::PTUV,
    ::SCL::tDomainLNEnum::PUPF,
    ::SCL::tDomainLNEnum::PVOC,
    ::SCL::tDomainLNEnum::PVPH,
    ::SCL::tDomainLNEnum::PZSU,
    ::SCL::tDomainLNEnum::RADR,
    ::SCL::tDomainLNEnum::RBDR,
    ::SCL::tDomainLNEnum::RBRF,
    ::SCL::tDomainLNEnum::RDIR,
    ::SCL::tDomainLNEnum::RDRE,
    ::SCL::tDomainLNEnum::RDRS,
    ::SCL::tDomainLNEnum::RFLO,
    ::SCL::tDomainLNEnum::RPSB,
    ::SCL::tDomainLNEnum::RREC,
    ::SCL::tDomainLNEnum::RSYN,
    ::SCL::tDomainLNEnum::SARC,
    ::SCL::tDomainLNEnum::SIMG,
    ::SCL::tDomainLNEnum::SIML,
    ::SCL::tDomainLNEnum::SPDC,
    ::SCL::tDomainLNEnum::TCTR,
    ::SCL::tDomainLNEnum::TVTR,
    ::SCL::tDomainLNEnum::XCBR,
    ::SCL::tDomainLNEnum::XSWI,
    ::SCL::tDomainLNEnum::YEFN,
    ::SCL::tDomainLNEnum::YLTC,
    ::SCL::tDomainLNEnum::YPSH,
    ::SCL::tDomainLNEnum::YPTR,
    ::SCL::tDomainLNEnum::ZAXN,
    ::SCL::tDomainLNEnum::ZBAT,
    ::SCL::tDomainLNEnum::ZBSH,
    ::SCL::tDomainLNEnum::ZCAB,
    ::SCL::tDomainLNEnum::ZCAP,
    ::SCL::tDomainLNEnum::ZCON,
    ::SCL::tDomainLNEnum::ZGEN,
    ::SCL::tDomainLNEnum::ZGIL,
    ::SCL::tDomainLNEnum::ZLIN,
    ::SCL::tDomainLNEnum::ZMOT,
    ::SCL::tDomainLNEnum::ZREA,
    ::SCL::tDomainLNEnum::ZRRC,
    ::SCL::tDomainLNEnum::ZSAR,
    ::SCL::tDomainLNEnum::ZTCF,
    ::SCL::tDomainLNEnum::ZTCR
  };

  // tPredefinedLNClassEnum
  //

  tPredefinedLNClassEnum::
  tPredefinedLNClassEnum (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::name (e, f, c)
  {
    _xsd_tPredefinedLNClassEnum_convert ();
  }

  tPredefinedLNClassEnum::
  tPredefinedLNClassEnum (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::name (a, f, c)
  {
    _xsd_tPredefinedLNClassEnum_convert ();
  }

  tPredefinedLNClassEnum::
  tPredefinedLNClassEnum (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::name (s, e, f, c)
  {
    _xsd_tPredefinedLNClassEnum_convert ();
  }

  tPredefinedLNClassEnum* tPredefinedLNClassEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tPredefinedLNClassEnum (*this, f, c);
  }

  tPredefinedLNClassEnum::value tPredefinedLNClassEnum::
  _xsd_tPredefinedLNClassEnum_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tPredefinedLNClassEnum_literals_);
    const value* i (::std::lower_bound (
                      _xsd_tPredefinedLNClassEnum_indexes_,
                      _xsd_tPredefinedLNClassEnum_indexes_ + 91,
                      *this,
                      c));

    if (i == _xsd_tPredefinedLNClassEnum_indexes_ + 91 || _xsd_tPredefinedLNClassEnum_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const tPredefinedLNClassEnum::
  _xsd_tPredefinedLNClassEnum_literals_[91] =
  {
    "LPHD",
    "LLN0",
    "ANCR",
    "ARCO",
    "ATCC",
    "AVCO",
    "CILO",
    "CSWI",
    "CALH",
    "CCGR",
    "CPOW",
    "GAPC",
    "GGIO",
    "GSAL",
    "IHMI",
    "IARC",
    "ITCI",
    "ITMI",
    "MMXU",
    "MDIF",
    "MHAI",
    "MHAN",
    "MMTR",
    "MMXN",
    "MSQI",
    "MSTA",
    "PDIF",
    "PDIS",
    "PDIR",
    "PDOP",
    "PDUP",
    "PFRC",
    "PHAR",
    "PHIZ",
    "PIOC",
    "PMRI",
    "PMSS",
    "POPF",
    "PPAM",
    "PSCH",
    "PSDE",
    "PTEF",
    "PTOC",
    "PTOF",
    "PTOV",
    "PTRC",
    "PTTR",
    "PTUC",
    "PTUV",
    "PUPF",
    "PTUF",
    "PVOC",
    "PVPH",
    "PZSU",
    "RSYN",
    "RDRE",
    "RADR",
    "RBDR",
    "RDRS",
    "RBRF",
    "RDIR",
    "RFLO",
    "RPSB",
    "RREC",
    "SARC",
    "SIMG",
    "SIML",
    "SPDC",
    "TCTR",
    "TVTR",
    "XCBR",
    "XSWI",
    "YPTR",
    "YEFN",
    "YLTC",
    "YPSH",
    "ZAXN",
    "ZBAT",
    "ZBSH",
    "ZCAB",
    "ZCAP",
    "ZCON",
    "ZGEN",
    "ZGIL",
    "ZLIN",
    "ZMOT",
    "ZREA",
    "ZRRC",
    "ZSAR",
    "ZTCF",
    "ZTCR"
  };

  const tPredefinedLNClassEnum::value tPredefinedLNClassEnum::
  _xsd_tPredefinedLNClassEnum_indexes_[91] =
  {
    ::SCL::tPredefinedLNClassEnum::ANCR,
    ::SCL::tPredefinedLNClassEnum::ARCO,
    ::SCL::tPredefinedLNClassEnum::ATCC,
    ::SCL::tPredefinedLNClassEnum::AVCO,
    ::SCL::tPredefinedLNClassEnum::CALH,
    ::SCL::tPredefinedLNClassEnum::CCGR,
    ::SCL::tPredefinedLNClassEnum::CILO,
    ::SCL::tPredefinedLNClassEnum::CPOW,
    ::SCL::tPredefinedLNClassEnum::CSWI,
    ::SCL::tPredefinedLNClassEnum::GAPC,
    ::SCL::tPredefinedLNClassEnum::GGIO,
    ::SCL::tPredefinedLNClassEnum::GSAL,
    ::SCL::tPredefinedLNClassEnum::IARC,
    ::SCL::tPredefinedLNClassEnum::IHMI,
    ::SCL::tPredefinedLNClassEnum::ITCI,
    ::SCL::tPredefinedLNClassEnum::ITMI,
    ::SCL::tPredefinedLNClassEnum::LLN0,
    ::SCL::tPredefinedLNClassEnum::LPHD,
    ::SCL::tPredefinedLNClassEnum::MDIF,
    ::SCL::tPredefinedLNClassEnum::MHAI,
    ::SCL::tPredefinedLNClassEnum::MHAN,
    ::SCL::tPredefinedLNClassEnum::MMTR,
    ::SCL::tPredefinedLNClassEnum::MMXN,
    ::SCL::tPredefinedLNClassEnum::MMXU,
    ::SCL::tPredefinedLNClassEnum::MSQI,
    ::SCL::tPredefinedLNClassEnum::MSTA,
    ::SCL::tPredefinedLNClassEnum::PDIF,
    ::SCL::tPredefinedLNClassEnum::PDIR,
    ::SCL::tPredefinedLNClassEnum::PDIS,
    ::SCL::tPredefinedLNClassEnum::PDOP,
    ::SCL::tPredefinedLNClassEnum::PDUP,
    ::SCL::tPredefinedLNClassEnum::PFRC,
    ::SCL::tPredefinedLNClassEnum::PHAR,
    ::SCL::tPredefinedLNClassEnum::PHIZ,
    ::SCL::tPredefinedLNClassEnum::PIOC,
    ::SCL::tPredefinedLNClassEnum::PMRI,
    ::SCL::tPredefinedLNClassEnum::PMSS,
    ::SCL::tPredefinedLNClassEnum::POPF,
    ::SCL::tPredefinedLNClassEnum::PPAM,
    ::SCL::tPredefinedLNClassEnum::PSCH,
    ::SCL::tPredefinedLNClassEnum::PSDE,
    ::SCL::tPredefinedLNClassEnum::PTEF,
    ::SCL::tPredefinedLNClassEnum::PTOC,
    ::SCL::tPredefinedLNClassEnum::PTOF,
    ::SCL::tPredefinedLNClassEnum::PTOV,
    ::SCL::tPredefinedLNClassEnum::PTRC,
    ::SCL::tPredefinedLNClassEnum::PTTR,
    ::SCL::tPredefinedLNClassEnum::PTUC,
    ::SCL::tPredefinedLNClassEnum::PTUF,
    ::SCL::tPredefinedLNClassEnum::PTUV,
    ::SCL::tPredefinedLNClassEnum::PUPF,
    ::SCL::tPredefinedLNClassEnum::PVOC,
    ::SCL::tPredefinedLNClassEnum::PVPH,
    ::SCL::tPredefinedLNClassEnum::PZSU,
    ::SCL::tPredefinedLNClassEnum::RADR,
    ::SCL::tPredefinedLNClassEnum::RBDR,
    ::SCL::tPredefinedLNClassEnum::RBRF,
    ::SCL::tPredefinedLNClassEnum::RDIR,
    ::SCL::tPredefinedLNClassEnum::RDRE,
    ::SCL::tPredefinedLNClassEnum::RDRS,
    ::SCL::tPredefinedLNClassEnum::RFLO,
    ::SCL::tPredefinedLNClassEnum::RPSB,
    ::SCL::tPredefinedLNClassEnum::RREC,
    ::SCL::tPredefinedLNClassEnum::RSYN,
    ::SCL::tPredefinedLNClassEnum::SARC,
    ::SCL::tPredefinedLNClassEnum::SIMG,
    ::SCL::tPredefinedLNClassEnum::SIML,
    ::SCL::tPredefinedLNClassEnum::SPDC,
    ::SCL::tPredefinedLNClassEnum::TCTR,
    ::SCL::tPredefinedLNClassEnum::TVTR,
    ::SCL::tPredefinedLNClassEnum::XCBR,
    ::SCL::tPredefinedLNClassEnum::XSWI,
    ::SCL::tPredefinedLNClassEnum::YEFN,
    ::SCL::tPredefinedLNClassEnum::YLTC,
    ::SCL::tPredefinedLNClassEnum::YPSH,
    ::SCL::tPredefinedLNClassEnum::YPTR,
    ::SCL::tPredefinedLNClassEnum::ZAXN,
    ::SCL::tPredefinedLNClassEnum::ZBAT,
    ::SCL::tPredefinedLNClassEnum::ZBSH,
    ::SCL::tPredefinedLNClassEnum::ZCAB,
    ::SCL::tPredefinedLNClassEnum::ZCAP,
    ::SCL::tPredefinedLNClassEnum::ZCON,
    ::SCL::tPredefinedLNClassEnum::ZGEN,
    ::SCL::tPredefinedLNClassEnum::ZGIL,
    ::SCL::tPredefinedLNClassEnum::ZLIN,
    ::SCL::tPredefinedLNClassEnum::ZMOT,
    ::SCL::tPredefinedLNClassEnum::ZREA,
    ::SCL::tPredefinedLNClassEnum::ZRRC,
    ::SCL::tPredefinedLNClassEnum::ZSAR,
    ::SCL::tPredefinedLNClassEnum::ZTCF,
    ::SCL::tPredefinedLNClassEnum::ZTCR
  };

  // tExtensionLNClassEnum
  //

  tExtensionLNClassEnum::
  tExtensionLNClassEnum (const char* _xsd_name_base)
  : ::xml_schema::name (_xsd_name_base)
  {
  }

  tExtensionLNClassEnum::
  tExtensionLNClassEnum (const ::std::string& _xsd_name_base)
  : ::xml_schema::name (_xsd_name_base)
  {
  }

  tExtensionLNClassEnum::
  tExtensionLNClassEnum (const ::xml_schema::name& _xsd_name_base)
  : ::xml_schema::name (_xsd_name_base)
  {
  }

  tExtensionLNClassEnum::
  tExtensionLNClassEnum (const tExtensionLNClassEnum& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::name (x, f, c)
  {
  }

  tExtensionLNClassEnum::
  tExtensionLNClassEnum (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::name (e, f, c)
  {
  }

  tExtensionLNClassEnum::
  tExtensionLNClassEnum (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::name (a, f, c)
  {
  }

  tExtensionLNClassEnum::
  tExtensionLNClassEnum (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::name (s, e, f, c)
  {
  }

  tExtensionLNClassEnum* tExtensionLNClassEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tExtensionLNClassEnum (*this, f, c);
  }

  tExtensionLNClassEnum::
  ~tExtensionLNClassEnum ()
  {
  }

  // tLNClassEnum
  //

  tLNClassEnum::
  tLNClassEnum (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
  }

  tLNClassEnum::
  tLNClassEnum (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
  }

  tLNClassEnum::
  tLNClassEnum (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
  }

  tLNClassEnum* tLNClassEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tLNClassEnum (*this, f, c);
  }

  // tPredefinedCDCEnum
  //

  tPredefinedCDCEnum::
  tPredefinedCDCEnum (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::name (e, f, c)
  {
    _xsd_tPredefinedCDCEnum_convert ();
  }

  tPredefinedCDCEnum::
  tPredefinedCDCEnum (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::name (a, f, c)
  {
    _xsd_tPredefinedCDCEnum_convert ();
  }

  tPredefinedCDCEnum::
  tPredefinedCDCEnum (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::name (s, e, f, c)
  {
    _xsd_tPredefinedCDCEnum_convert ();
  }

  tPredefinedCDCEnum* tPredefinedCDCEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tPredefinedCDCEnum (*this, f, c);
  }

  tPredefinedCDCEnum::value tPredefinedCDCEnum::
  _xsd_tPredefinedCDCEnum_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tPredefinedCDCEnum_literals_);
    const value* i (::std::lower_bound (
                      _xsd_tPredefinedCDCEnum_indexes_,
                      _xsd_tPredefinedCDCEnum_indexes_ + 29,
                      *this,
                      c));

    if (i == _xsd_tPredefinedCDCEnum_indexes_ + 29 || _xsd_tPredefinedCDCEnum_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const tPredefinedCDCEnum::
  _xsd_tPredefinedCDCEnum_literals_[29] =
  {
    "SPS",
    "DPS",
    "INS",
    "ACT",
    "ACD",
    "SEC",
    "BCR",
    "MV",
    "CMV",
    "SAV",
    "WYE",
    "DEL",
    "SEQ",
    "HMV",
    "HWYE",
    "HDEL",
    "SPC",
    "DPC",
    "INC",
    "BSC",
    "ISC",
    "APC",
    "SPG",
    "ING",
    "ASG",
    "CURVE",
    "DPL",
    "LPL",
    "CSD"
  };

  const tPredefinedCDCEnum::value tPredefinedCDCEnum::
  _xsd_tPredefinedCDCEnum_indexes_[29] =
  {
    ::SCL::tPredefinedCDCEnum::ACD,
    ::SCL::tPredefinedCDCEnum::ACT,
    ::SCL::tPredefinedCDCEnum::APC,
    ::SCL::tPredefinedCDCEnum::ASG,
    ::SCL::tPredefinedCDCEnum::BCR,
    ::SCL::tPredefinedCDCEnum::BSC,
    ::SCL::tPredefinedCDCEnum::CMV,
    ::SCL::tPredefinedCDCEnum::CSD,
    ::SCL::tPredefinedCDCEnum::CURVE,
    ::SCL::tPredefinedCDCEnum::DEL,
    ::SCL::tPredefinedCDCEnum::DPC,
    ::SCL::tPredefinedCDCEnum::DPL,
    ::SCL::tPredefinedCDCEnum::DPS,
    ::SCL::tPredefinedCDCEnum::HDEL,
    ::SCL::tPredefinedCDCEnum::HMV,
    ::SCL::tPredefinedCDCEnum::HWYE,
    ::SCL::tPredefinedCDCEnum::INC,
    ::SCL::tPredefinedCDCEnum::ING,
    ::SCL::tPredefinedCDCEnum::INS,
    ::SCL::tPredefinedCDCEnum::ISC,
    ::SCL::tPredefinedCDCEnum::LPL,
    ::SCL::tPredefinedCDCEnum::MV,
    ::SCL::tPredefinedCDCEnum::SAV,
    ::SCL::tPredefinedCDCEnum::SEC,
    ::SCL::tPredefinedCDCEnum::SEQ,
    ::SCL::tPredefinedCDCEnum::SPC,
    ::SCL::tPredefinedCDCEnum::SPG,
    ::SCL::tPredefinedCDCEnum::SPS,
    ::SCL::tPredefinedCDCEnum::WYE
  };

  // tExtensionCDCEnum
  //

  tExtensionCDCEnum::
  tExtensionCDCEnum (const char* _xsd_name_base)
  : ::xml_schema::name (_xsd_name_base)
  {
  }

  tExtensionCDCEnum::
  tExtensionCDCEnum (const ::std::string& _xsd_name_base)
  : ::xml_schema::name (_xsd_name_base)
  {
  }

  tExtensionCDCEnum::
  tExtensionCDCEnum (const ::xml_schema::name& _xsd_name_base)
  : ::xml_schema::name (_xsd_name_base)
  {
  }

  tExtensionCDCEnum::
  tExtensionCDCEnum (const tExtensionCDCEnum& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::name (x, f, c)
  {
  }

  tExtensionCDCEnum::
  tExtensionCDCEnum (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::name (e, f, c)
  {
  }

  tExtensionCDCEnum::
  tExtensionCDCEnum (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::name (a, f, c)
  {
  }

  tExtensionCDCEnum::
  tExtensionCDCEnum (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::name (s, e, f, c)
  {
  }

  tExtensionCDCEnum* tExtensionCDCEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tExtensionCDCEnum (*this, f, c);
  }

  tExtensionCDCEnum::
  ~tExtensionCDCEnum ()
  {
  }

  // tCDCEnum
  //

  tCDCEnum::
  tCDCEnum (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
  }

  tCDCEnum::
  tCDCEnum (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
  }

  tCDCEnum::
  tCDCEnum (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
  }

  tCDCEnum* tCDCEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tCDCEnum (*this, f, c);
  }

  // tTrgOptEnum
  //

  tTrgOptEnum::
  tTrgOptEnum (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::name (e, f, c)
  {
    _xsd_tTrgOptEnum_convert ();
  }

  tTrgOptEnum::
  tTrgOptEnum (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::name (a, f, c)
  {
    _xsd_tTrgOptEnum_convert ();
  }

  tTrgOptEnum::
  tTrgOptEnum (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::name (s, e, f, c)
  {
    _xsd_tTrgOptEnum_convert ();
  }

  tTrgOptEnum* tTrgOptEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tTrgOptEnum (*this, f, c);
  }

  tTrgOptEnum::value tTrgOptEnum::
  _xsd_tTrgOptEnum_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tTrgOptEnum_literals_);
    const value* i (::std::lower_bound (
                      _xsd_tTrgOptEnum_indexes_,
                      _xsd_tTrgOptEnum_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_tTrgOptEnum_indexes_ + 4 || _xsd_tTrgOptEnum_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const tTrgOptEnum::
  _xsd_tTrgOptEnum_literals_[4] =
  {
    "dchg",
    "qchg",
    "dupd",
    "none"
  };

  const tTrgOptEnum::value tTrgOptEnum::
  _xsd_tTrgOptEnum_indexes_[4] =
  {
    ::SCL::tTrgOptEnum::dchg,
    ::SCL::tTrgOptEnum::dupd,
    ::SCL::tTrgOptEnum::none,
    ::SCL::tTrgOptEnum::qchg
  };

  // tTrgOptControlEnum
  //

  tTrgOptControlEnum::
  tTrgOptControlEnum (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::name (e, f, c)
  {
    _xsd_tTrgOptControlEnum_convert ();
  }

  tTrgOptControlEnum::
  tTrgOptControlEnum (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::name (a, f, c)
  {
    _xsd_tTrgOptControlEnum_convert ();
  }

  tTrgOptControlEnum::
  tTrgOptControlEnum (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::name (s, e, f, c)
  {
    _xsd_tTrgOptControlEnum_convert ();
  }

  tTrgOptControlEnum* tTrgOptControlEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tTrgOptControlEnum (*this, f, c);
  }

  tTrgOptControlEnum::value tTrgOptControlEnum::
  _xsd_tTrgOptControlEnum_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tTrgOptControlEnum_literals_);
    const value* i (::std::lower_bound (
                      _xsd_tTrgOptControlEnum_indexes_,
                      _xsd_tTrgOptControlEnum_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_tTrgOptControlEnum_indexes_ + 5 || _xsd_tTrgOptControlEnum_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const tTrgOptControlEnum::
  _xsd_tTrgOptControlEnum_literals_[5] =
  {
    "dchg",
    "qchg",
    "dupd",
    "period",
    "none"
  };

  const tTrgOptControlEnum::value tTrgOptControlEnum::
  _xsd_tTrgOptControlEnum_indexes_[5] =
  {
    ::SCL::tTrgOptControlEnum::dchg,
    ::SCL::tTrgOptControlEnum::dupd,
    ::SCL::tTrgOptControlEnum::none,
    ::SCL::tTrgOptControlEnum::period,
    ::SCL::tTrgOptControlEnum::qchg
  };

  // tFCEnum
  //

  tFCEnum::
  tFCEnum (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::name (e, f, c)
  {
    _xsd_tFCEnum_convert ();
  }

  tFCEnum::
  tFCEnum (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::name (a, f, c)
  {
    _xsd_tFCEnum_convert ();
  }

  tFCEnum::
  tFCEnum (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::name (s, e, f, c)
  {
    _xsd_tFCEnum_convert ();
  }

  tFCEnum* tFCEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tFCEnum (*this, f, c);
  }

  tFCEnum::value tFCEnum::
  _xsd_tFCEnum_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tFCEnum_literals_);
    const value* i (::std::lower_bound (
                      _xsd_tFCEnum_indexes_,
                      _xsd_tFCEnum_indexes_ + 10,
                      *this,
                      c));

    if (i == _xsd_tFCEnum_indexes_ + 10 || _xsd_tFCEnum_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const tFCEnum::
  _xsd_tFCEnum_literals_[10] =
  {
    "ST",
    "MX",
    "CO",
    "SP",
    "SG",
    "SE",
    "SV",
    "CF",
    "DC",
    "EX"
  };

  const tFCEnum::value tFCEnum::
  _xsd_tFCEnum_indexes_[10] =
  {
    ::SCL::tFCEnum::CF,
    ::SCL::tFCEnum::CO,
    ::SCL::tFCEnum::DC,
    ::SCL::tFCEnum::EX,
    ::SCL::tFCEnum::MX,
    ::SCL::tFCEnum::SE,
    ::SCL::tFCEnum::SG,
    ::SCL::tFCEnum::SP,
    ::SCL::tFCEnum::ST,
    ::SCL::tFCEnum::SV
  };

  // tServiceFCEnum
  //

  tServiceFCEnum::
  tServiceFCEnum (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::name (e, f, c)
  {
    _xsd_tServiceFCEnum_convert ();
  }

  tServiceFCEnum::
  tServiceFCEnum (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::name (a, f, c)
  {
    _xsd_tServiceFCEnum_convert ();
  }

  tServiceFCEnum::
  tServiceFCEnum (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::name (s, e, f, c)
  {
    _xsd_tServiceFCEnum_convert ();
  }

  tServiceFCEnum* tServiceFCEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tServiceFCEnum (*this, f, c);
  }

  tServiceFCEnum::value tServiceFCEnum::
  _xsd_tServiceFCEnum_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tServiceFCEnum_literals_);
    const value* i (::std::lower_bound (
                      _xsd_tServiceFCEnum_indexes_,
                      _xsd_tServiceFCEnum_indexes_ + 8,
                      *this,
                      c));

    if (i == _xsd_tServiceFCEnum_indexes_ + 8 || _xsd_tServiceFCEnum_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const tServiceFCEnum::
  _xsd_tServiceFCEnum_literals_[8] =
  {
    "SG",
    "BR",
    "RP",
    "LG",
    "GO",
    "GS",
    "MS",
    "US"
  };

  const tServiceFCEnum::value tServiceFCEnum::
  _xsd_tServiceFCEnum_indexes_[8] =
  {
    ::SCL::tServiceFCEnum::BR,
    ::SCL::tServiceFCEnum::GO,
    ::SCL::tServiceFCEnum::GS,
    ::SCL::tServiceFCEnum::LG,
    ::SCL::tServiceFCEnum::MS,
    ::SCL::tServiceFCEnum::RP,
    ::SCL::tServiceFCEnum::SG,
    ::SCL::tServiceFCEnum::US
  };

  // tPredefinedBasicTypeEnum
  //

  tPredefinedBasicTypeEnum::
  tPredefinedBasicTypeEnum (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::name (e, f, c)
  {
    _xsd_tPredefinedBasicTypeEnum_convert ();
  }

  tPredefinedBasicTypeEnum::
  tPredefinedBasicTypeEnum (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::name (a, f, c)
  {
    _xsd_tPredefinedBasicTypeEnum_convert ();
  }

  tPredefinedBasicTypeEnum::
  tPredefinedBasicTypeEnum (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::name (s, e, f, c)
  {
    _xsd_tPredefinedBasicTypeEnum_convert ();
  }

  tPredefinedBasicTypeEnum* tPredefinedBasicTypeEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tPredefinedBasicTypeEnum (*this, f, c);
  }

  tPredefinedBasicTypeEnum::value tPredefinedBasicTypeEnum::
  _xsd_tPredefinedBasicTypeEnum_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tPredefinedBasicTypeEnum_literals_);
    const value* i (::std::lower_bound (
                      _xsd_tPredefinedBasicTypeEnum_indexes_,
                      _xsd_tPredefinedBasicTypeEnum_indexes_ + 26,
                      *this,
                      c));

    if (i == _xsd_tPredefinedBasicTypeEnum_indexes_ + 26 || _xsd_tPredefinedBasicTypeEnum_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const tPredefinedBasicTypeEnum::
  _xsd_tPredefinedBasicTypeEnum_literals_[26] =
  {
    "BOOLEAN",
    "INT8",
    "INT16",
    "INT24",
    "INT32",
    "INT128",
    "INT8U",
    "INT16U",
    "INT24U",
    "INT32U",
    "FLOAT32",
    "FLOAT64",
    "Enum",
    "Dbpos",
    "Tcmd",
    "Quality",
    "Timestamp",
    "VisString32",
    "VisString64",
    "VisString129",
    "VisString255",
    "Octet64",
    "Struct",
    "EntryTime",
    "Unicode255",
    "Check"
  };

  const tPredefinedBasicTypeEnum::value tPredefinedBasicTypeEnum::
  _xsd_tPredefinedBasicTypeEnum_indexes_[26] =
  {
    ::SCL::tPredefinedBasicTypeEnum::BOOLEAN,
    ::SCL::tPredefinedBasicTypeEnum::Check,
    ::SCL::tPredefinedBasicTypeEnum::Dbpos,
    ::SCL::tPredefinedBasicTypeEnum::EntryTime,
    ::SCL::tPredefinedBasicTypeEnum::Enum,
    ::SCL::tPredefinedBasicTypeEnum::FLOAT32,
    ::SCL::tPredefinedBasicTypeEnum::FLOAT64,
    ::SCL::tPredefinedBasicTypeEnum::INT128,
    ::SCL::tPredefinedBasicTypeEnum::INT16,
    ::SCL::tPredefinedBasicTypeEnum::INT16U,
    ::SCL::tPredefinedBasicTypeEnum::INT24,
    ::SCL::tPredefinedBasicTypeEnum::INT24U,
    ::SCL::tPredefinedBasicTypeEnum::INT32,
    ::SCL::tPredefinedBasicTypeEnum::INT32U,
    ::SCL::tPredefinedBasicTypeEnum::INT8,
    ::SCL::tPredefinedBasicTypeEnum::INT8U,
    ::SCL::tPredefinedBasicTypeEnum::Octet64,
    ::SCL::tPredefinedBasicTypeEnum::Quality,
    ::SCL::tPredefinedBasicTypeEnum::Struct,
    ::SCL::tPredefinedBasicTypeEnum::Tcmd,
    ::SCL::tPredefinedBasicTypeEnum::Timestamp,
    ::SCL::tPredefinedBasicTypeEnum::Unicode255,
    ::SCL::tPredefinedBasicTypeEnum::VisString129,
    ::SCL::tPredefinedBasicTypeEnum::VisString255,
    ::SCL::tPredefinedBasicTypeEnum::VisString32,
    ::SCL::tPredefinedBasicTypeEnum::VisString64
  };

  // tExtensionBasicTypeEnum
  //

  tExtensionBasicTypeEnum::
  tExtensionBasicTypeEnum (const char* _xsd_name_base)
  : ::xml_schema::name (_xsd_name_base)
  {
  }

  tExtensionBasicTypeEnum::
  tExtensionBasicTypeEnum (const ::std::string& _xsd_name_base)
  : ::xml_schema::name (_xsd_name_base)
  {
  }

  tExtensionBasicTypeEnum::
  tExtensionBasicTypeEnum (const ::xml_schema::name& _xsd_name_base)
  : ::xml_schema::name (_xsd_name_base)
  {
  }

  tExtensionBasicTypeEnum::
  tExtensionBasicTypeEnum (const tExtensionBasicTypeEnum& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::name (x, f, c)
  {
  }

  tExtensionBasicTypeEnum::
  tExtensionBasicTypeEnum (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::name (e, f, c)
  {
  }

  tExtensionBasicTypeEnum::
  tExtensionBasicTypeEnum (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::name (a, f, c)
  {
  }

  tExtensionBasicTypeEnum::
  tExtensionBasicTypeEnum (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::name (s, e, f, c)
  {
  }

  tExtensionBasicTypeEnum* tExtensionBasicTypeEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tExtensionBasicTypeEnum (*this, f, c);
  }

  tExtensionBasicTypeEnum::
  ~tExtensionBasicTypeEnum ()
  {
  }

  // tBasicTypeEnum
  //

  tBasicTypeEnum::
  tBasicTypeEnum (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
  }

  tBasicTypeEnum::
  tBasicTypeEnum (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
  }

  tBasicTypeEnum::
  tBasicTypeEnum (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
  }

  tBasicTypeEnum* tBasicTypeEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tBasicTypeEnum (*this, f, c);
  }

  // tValKindEnum
  //

  tValKindEnum::
  tValKindEnum (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::name (e, f, c)
  {
    _xsd_tValKindEnum_convert ();
  }

  tValKindEnum::
  tValKindEnum (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::name (a, f, c)
  {
    _xsd_tValKindEnum_convert ();
  }

  tValKindEnum::
  tValKindEnum (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::name (s, e, f, c)
  {
    _xsd_tValKindEnum_convert ();
  }

  tValKindEnum* tValKindEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tValKindEnum (*this, f, c);
  }

  tValKindEnum::value tValKindEnum::
  _xsd_tValKindEnum_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tValKindEnum_literals_);
    const value* i (::std::lower_bound (
                      _xsd_tValKindEnum_indexes_,
                      _xsd_tValKindEnum_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_tValKindEnum_indexes_ + 4 || _xsd_tValKindEnum_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const tValKindEnum::
  _xsd_tValKindEnum_literals_[4] =
  {
    "Spec",
    "Conf",
    "RO",
    "Set"
  };

  const tValKindEnum::value tValKindEnum::
  _xsd_tValKindEnum_indexes_[4] =
  {
    ::SCL::tValKindEnum::Conf,
    ::SCL::tValKindEnum::RO,
    ::SCL::tValKindEnum::Set,
    ::SCL::tValKindEnum::Spec
  };

  // tGSEControlTypeEnum
  //

  tGSEControlTypeEnum::
  tGSEControlTypeEnum (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (e, f, c)
  {
    _xsd_tGSEControlTypeEnum_convert ();
  }

  tGSEControlTypeEnum::
  tGSEControlTypeEnum (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (a, f, c)
  {
    _xsd_tGSEControlTypeEnum_convert ();
  }

  tGSEControlTypeEnum::
  tGSEControlTypeEnum (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::name (s, e, f, c)
  {
    _xsd_tGSEControlTypeEnum_convert ();
  }

  tGSEControlTypeEnum* tGSEControlTypeEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tGSEControlTypeEnum (*this, f, c);
  }

  tGSEControlTypeEnum::value tGSEControlTypeEnum::
  _xsd_tGSEControlTypeEnum_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tGSEControlTypeEnum_literals_);
    const value* i (::std::lower_bound (
                      _xsd_tGSEControlTypeEnum_indexes_,
                      _xsd_tGSEControlTypeEnum_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_tGSEControlTypeEnum_indexes_ + 2 || _xsd_tGSEControlTypeEnum_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const tGSEControlTypeEnum::
  _xsd_tGSEControlTypeEnum_literals_[2] =
  {
    "GSSE",
    "GOOSE"
  };

  const tGSEControlTypeEnum::value tGSEControlTypeEnum::
  _xsd_tGSEControlTypeEnum_indexes_[2] =
  {
    ::SCL::tGSEControlTypeEnum::GOOSE,
    ::SCL::tGSEControlTypeEnum::GSSE
  };

  // tSIUnitEnum
  //

  tSIUnitEnum::
  tSIUnitEnum (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::token (e, f, c)
  {
    _xsd_tSIUnitEnum_convert ();
  }

  tSIUnitEnum::
  tSIUnitEnum (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::token (a, f, c)
  {
    _xsd_tSIUnitEnum_convert ();
  }

  tSIUnitEnum::
  tSIUnitEnum (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::token (s, e, f, c)
  {
    _xsd_tSIUnitEnum_convert ();
  }

  tSIUnitEnum* tSIUnitEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tSIUnitEnum (*this, f, c);
  }

  tSIUnitEnum::value tSIUnitEnum::
  _xsd_tSIUnitEnum_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tSIUnitEnum_literals_);
    const value* i (::std::lower_bound (
                      _xsd_tSIUnitEnum_indexes_,
                      _xsd_tSIUnitEnum_indexes_ + 59,
                      *this,
                      c));

    if (i == _xsd_tSIUnitEnum_indexes_ + 59 || _xsd_tSIUnitEnum_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const tSIUnitEnum::
  _xsd_tSIUnitEnum_literals_[59] =
  {
    "none",
    "m",
    "kg",
    "s",
    "A",
    "K",
    "mol",
    "cd",
    "deg",
    "rad",
    "sr",
    "Gy",
    "q",
    "\xC2\xB0""C",
    "Sv",
    "F",
    "C",
    "S",
    "H",
    "V",
    "ohm",
    "J",
    "N",
    "Hz",
    "lx",
    "Lm",
    "Wb",
    "T",
    "W",
    "Pa",
    "m^2",
    "m^3",
    "m/s",
    "m/s^2",
    "m^3/s",
    "m/m^3",
    "M",
    "kg/m^3",
    "m^2/s",
    "W/m K",
    "J/K",
    "ppm",
    "s^-1",
    "rad/s",
    "VA",
    "Watts",
    "VAr",
    "phi",
    "cos_phi",
    "Vs",
    "V^2",
    "As",
    "A^2",
    "A^2 s",
    "VAh",
    "Wh",
    "VArh",
    "V/Hz",
    "b/s"
  };

  const tSIUnitEnum::value tSIUnitEnum::
  _xsd_tSIUnitEnum_indexes_[59] =
  {
    ::SCL::tSIUnitEnum::A,
    ::SCL::tSIUnitEnum::A_2,
    ::SCL::tSIUnitEnum::A_2_s,
    ::SCL::tSIUnitEnum::As,
    ::SCL::tSIUnitEnum::C,
    ::SCL::tSIUnitEnum::F,
    ::SCL::tSIUnitEnum::Gy,
    ::SCL::tSIUnitEnum::H,
    ::SCL::tSIUnitEnum::Hz,
    ::SCL::tSIUnitEnum::J,
    ::SCL::tSIUnitEnum::J_K,
    ::SCL::tSIUnitEnum::K,
    ::SCL::tSIUnitEnum::Lm,
    ::SCL::tSIUnitEnum::M,
    ::SCL::tSIUnitEnum::N,
    ::SCL::tSIUnitEnum::Pa,
    ::SCL::tSIUnitEnum::S,
    ::SCL::tSIUnitEnum::Sv,
    ::SCL::tSIUnitEnum::T,
    ::SCL::tSIUnitEnum::V,
    ::SCL::tSIUnitEnum::V_Hz,
    ::SCL::tSIUnitEnum::VA,
    ::SCL::tSIUnitEnum::VAh,
    ::SCL::tSIUnitEnum::VAr,
    ::SCL::tSIUnitEnum::VArh,
    ::SCL::tSIUnitEnum::V_2,
    ::SCL::tSIUnitEnum::Vs,
    ::SCL::tSIUnitEnum::W,
    ::SCL::tSIUnitEnum::W_m_K,
    ::SCL::tSIUnitEnum::Watts,
    ::SCL::tSIUnitEnum::Wb,
    ::SCL::tSIUnitEnum::Wh,
    ::SCL::tSIUnitEnum::b_s,
    ::SCL::tSIUnitEnum::cd,
    ::SCL::tSIUnitEnum::cos_phi,
    ::SCL::tSIUnitEnum::deg,
    ::SCL::tSIUnitEnum::kg,
    ::SCL::tSIUnitEnum::kg_m_3,
    ::SCL::tSIUnitEnum::lx,
    ::SCL::tSIUnitEnum::m,
    ::SCL::tSIUnitEnum::m_m_3,
    ::SCL::tSIUnitEnum::m_s,
    ::SCL::tSIUnitEnum::m_s_2,
    ::SCL::tSIUnitEnum::m_2,
    ::SCL::tSIUnitEnum::m_2_s,
    ::SCL::tSIUnitEnum::m_3,
    ::SCL::tSIUnitEnum::m_3_s,
    ::SCL::tSIUnitEnum::mol,
    ::SCL::tSIUnitEnum::none,
    ::SCL::tSIUnitEnum::ohm,
    ::SCL::tSIUnitEnum::phi,
    ::SCL::tSIUnitEnum::ppm,
    ::SCL::tSIUnitEnum::q,
    ::SCL::tSIUnitEnum::rad,
    ::SCL::tSIUnitEnum::rad_s,
    ::SCL::tSIUnitEnum::s,
    ::SCL::tSIUnitEnum::s__1,
    ::SCL::tSIUnitEnum::sr,
    ::SCL::tSIUnitEnum::cxx_C
  };

  // tUnitMultiplierEnum
  //

  tUnitMultiplierEnum::
  tUnitMultiplierEnum (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::normalized_string (e, f, c)
  {
    _xsd_tUnitMultiplierEnum_convert ();
  }

  tUnitMultiplierEnum::
  tUnitMultiplierEnum (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::normalized_string (a, f, c)
  {
    _xsd_tUnitMultiplierEnum_convert ();
  }

  tUnitMultiplierEnum::
  tUnitMultiplierEnum (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::normalized_string (s, e, f, c)
  {
    _xsd_tUnitMultiplierEnum_convert ();
  }

  tUnitMultiplierEnum* tUnitMultiplierEnum::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tUnitMultiplierEnum (*this, f, c);
  }

  tUnitMultiplierEnum::value tUnitMultiplierEnum::
  _xsd_tUnitMultiplierEnum_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_tUnitMultiplierEnum_literals_);
    const value* i (::std::lower_bound (
                      _xsd_tUnitMultiplierEnum_indexes_,
                      _xsd_tUnitMultiplierEnum_indexes_ + 21,
                      *this,
                      c));

    if (i == _xsd_tUnitMultiplierEnum_indexes_ + 21 || _xsd_tUnitMultiplierEnum_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const tUnitMultiplierEnum::
  _xsd_tUnitMultiplierEnum_literals_[21] =
  {
    "",
    "m",
    "k",
    "M",
    "mu",
    "y",
    "z",
    "a",
    "f",
    "p",
    "n",
    "c",
    "d",
    "da",
    "h",
    "G",
    "T",
    "P",
    "E",
    "Z",
    "Y"
  };

  const tUnitMultiplierEnum::value tUnitMultiplierEnum::
  _xsd_tUnitMultiplierEnum_indexes_[21] =
  {
    ::SCL::tUnitMultiplierEnum::empty,
    ::SCL::tUnitMultiplierEnum::E,
    ::SCL::tUnitMultiplierEnum::G,
    ::SCL::tUnitMultiplierEnum::M,
    ::SCL::tUnitMultiplierEnum::P,
    ::SCL::tUnitMultiplierEnum::T,
    ::SCL::tUnitMultiplierEnum::Y,
    ::SCL::tUnitMultiplierEnum::Z,
    ::SCL::tUnitMultiplierEnum::a,
    ::SCL::tUnitMultiplierEnum::c,
    ::SCL::tUnitMultiplierEnum::d,
    ::SCL::tUnitMultiplierEnum::da,
    ::SCL::tUnitMultiplierEnum::f,
    ::SCL::tUnitMultiplierEnum::h,
    ::SCL::tUnitMultiplierEnum::k,
    ::SCL::tUnitMultiplierEnum::m,
    ::SCL::tUnitMultiplierEnum::mu,
    ::SCL::tUnitMultiplierEnum::n,
    ::SCL::tUnitMultiplierEnum::p,
    ::SCL::tUnitMultiplierEnum::y,
    ::SCL::tUnitMultiplierEnum::z
  };
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace SCL
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

